<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小白维基</title>
  
  <subtitle>语言，框架，架构，技术有关的一切都在这里。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wiki.blanc.site/"/>
  <updated>2021-05-23T12:08:45.167Z</updated>
  <id>https://wiki.blanc.site/</id>
  
  <author>
    <name>ryomahan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人工智能-0-概览</title>
    <link href="https://wiki.blanc.site/archives/8fbb5ea2.html"/>
    <id>https://wiki.blanc.site/archives/8fbb5ea2.html</id>
    <published>2021-05-13T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.167Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="3-计算机应用技术" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%94%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="4-人工智能" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%94%E7%94%A8%E6%8A%80%E6%9C%AF/4-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="人工智能" scheme="https://wiki.blanc.site/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>神经网络-1-概览</title>
    <link href="https://wiki.blanc.site/archives/61dc3b15.html"/>
    <id>https://wiki.blanc.site/archives/61dc3b15.html</id>
    <published>2021-05-13T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="3-计算机应用技术" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%94%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="4-人工智能" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%94%E7%94%A8%E6%8A%80%E6%9C%AF/4-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="人工智能" scheme="https://wiki.blanc.site/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="神经网络" scheme="https://wiki.blanc.site/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机常见的网络模式</title>
    <link href="https://wiki.blanc.site/archives/ab9fcc5d.html"/>
    <id>https://wiki.blanc.site/archives/ab9fcc5d.html</id>
    <published>2021-05-12T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无论使用何种虚拟机管理软件都不可避免的要接触到虚拟机网络这一概念，本文整理了常见的几类网络模式：</p><ol><li>未指定</li><li>内部模式</li><li>桥接模式</li><li>NAT 模式</li><li>主机网络模式</li></ol><p><strong>注：后文展示的全部图片均为便于理解的理解模型，而非拓扑图。</strong></p><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><p>宿主机（host）：安装虚拟机软件的机器<br>虚拟机（guest）：被虚拟机软件构建出的虚构机器</p><h2 id="未指定-Not-Attached"><a href="#未指定-Not-Attached" class="headerlink" title="未指定 | Not Attached"></a>未指定 | Not Attached</h2><p>虚拟机有虚拟网卡但是没有链接网线。</p><h2 id="内部模式-Internal"><a href="#内部模式-Internal" class="headerlink" title="内部模式 | Internal"></a>内部模式 | Internal</h2><p>虚拟机与外部环境完全断开，只允许虚拟机之间互相访问。</p><h2 id="桥接模式-Bridge-Networking"><a href="#桥接模式-Bridge-Networking" class="headerlink" title="桥接模式 | Bridge Networking"></a>桥接模式 | Bridge Networking</h2><p>桥接模式类似于在主机内部虚拟出一个交换机，通过这台交换机连接了所有（使用桥接模式的）虚拟机和（当前）宿主机。宿主机和虚拟机对于外部网络来说处于相同地位，即对于外部网络来说宿主机和虚拟机是不同主机。</p><p><img src="https://img.blanc.site//wiki/img/20210512210359.png" alt="桥接模式理解模型"></p><h2 id="NAT-模式-Network-Address-Translation"><a href="#NAT-模式-Network-Address-Translation" class="headerlink" title="NAT 模式 | Network Address Translation"></a>NAT 模式 | Network Address Translation</h2><p>在 NAT 模式下，就是让虚拟机借助 NAT 功能通过宿主机所在的网络来访问公网，虚拟机和宿主机不再同一个网络中。虚拟机向外网发送的请求数据会交由 NAT 网络适配器加上「特殊标记」后并以宿主机的名义转发出去，外网返回的响应数据也是先由主机接收让后再交由 NAT 网络适配器根据「特殊标记」进行识别并转发给对应的虚拟机。</p><p>严格来说 NAT 模式又可分为：NAT 和 NAT 网络两种模式：</p><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>通过虚拟 NAT 设备将宿主机与虚拟机进行网络隔离，虚拟机与虚拟机也进行网络隔离，每台虚拟机单独拥有一台虚拟 NAT 设备。</p><p><img src="https://img.blanc.site//wiki/img/20210512154009.png" alt="NAT 理解模型"></p><h3 id="NAT-网络"><a href="#NAT-网络" class="headerlink" title="NAT 网络"></a>NAT 网络</h3><p>通过虚拟 NAT 设备在宿主机和虚拟机之间进行网络隔离，虚拟机之间可以互相连通，所有虚拟机共享一台虚拟 NAT 设备。</p><p><img src="https://img.blanc.site//wiki/img/20210512154008.png" alt="NAT 网络理解模型"></p><h2 id="主机网络模式-Host-only"><a href="#主机网络模式-Host-only" class="headerlink" title="主机网络模式 | Host-only"></a>主机网络模式 | Host-only</h2><p>（默认情况下）仅限于宿主机内部访问的网络，虚拟机之间相互连通，虚拟机和宿主机之间也相互连通，但虚拟机不能访问外部网络。可以通过配置使得虚拟机可以通过宿主机的网卡访问外部网络。</p><p>同一台宿主机可以创建多个 Host-only 模式的虚拟网络，处于同一个 Host-only 虚拟网络中的虚拟机可以相互通信。如果处于不同虚拟网络，则默认不能通信。</p><p><img src="https://img.blanc.site//wiki/img/20210512210620.png" alt="主机网络模式理解模型"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://cloud.tencent.com/developer/article/1432433" target="_blank" rel="external nofollow noopener noreferrer">猿大白：虚拟机网络模型详解，看这篇就够了（图文并茂）</a></li><li><a href="https://cizixs.com/2017/03/09/virtualbox-network-mode-explained/" target="_blank" rel="external nofollow noopener noreferrer">CWH：virtualbox 常用网络模式解释和配置</a></li><li><a href="https://www.k0rz3n.com/2017/10/27/VMware%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E4%BB%A5%E5%8F%8A%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%8B%93%E6%89%91%E5%88%86%E6%9E%90/" target="_blank" rel="external nofollow noopener noreferrer">K0rz3n：VMware 使用注意事项以及三种网络模式的拓扑分析</a></li><li><a href="https://rqsir.github.io/2019/05/23/VirtualBox-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/" target="_blank" rel="external nofollow noopener noreferrer">RQ：VirtualBox 网络模式总结</a></li><li><a href="https://y1ng.org/2019/12/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%A6%81%E7%94%A8NAT%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external nofollow noopener noreferrer">喵了个咪乎：为什么内网渗透要用NAT模式</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;无论使用何种虚拟机管理软件都不可避免的要接触到虚拟机网络这一概念，本文整理了常见的几类网络模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;未指定&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="1-网络笔记" scheme="https://wiki.blanc.site/categories/1-%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="虚拟机" scheme="https://wiki.blanc.site/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Shell 基础语法</title>
    <link href="https://wiki.blanc.site/archives/3beb222a.html"/>
    <id>https://wiki.blanc.site/archives/3beb222a.html</id>
    <published>2021-05-09T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文只是对 shell 脚本语言中一些常用的基础语法进行汇总整理，如果你真的想系统的学习 shell 脚本编程，这里推荐两本电子读物：</p><ol><li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="external nofollow noopener noreferrer">The Linux Command Line-中文版</a></li><li><a href="https://linuxstory.gitbook.io/advanced-bash-scripting-guide-in-chinese/" target="_blank" rel="external nofollow noopener noreferrer">Advanced Bash-Scripting Guide-中文版</a></li></ol><p>第一本相对来说更加平滑，适合零基础的人进行自学；<br>第二本相对来说更加全面，适合有一点基础的人进行自学；</p><p>另外，强烈建议你在学习了一定 shell 语法基础之后去找一个比较完善的编码规范进行阅读并严格按照规范进行脚本编辑，这里我个人推荐 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-shell-styleguide/contents/" target="_blank" rel="external nofollow noopener noreferrer">Google Shell 风格指南</a>。</p><p>无论是大的项目脚本还是小的工具脚本，严格的按照一个成熟的编码规范进行编辑能够帮助我们（在前期）更好的规划脚本以及（在后期）更快的 DEBUG。</p><p><strong>注：本文中所有测试代码均为 zsh 输出结果</strong><br><strong>注2：本文中所有测试代码均以 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-shell-styleguide/contents/" target="_blank" rel="external nofollow noopener noreferrer">Google Shell 风格指南</a> 作为编码规范</strong></p><h2 id="变量相关"><a href="#变量相关" class="headerlink" title="变量相关"></a>变量相关</h2><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><ol><li>定义变量时不需要加美元符号（$）；</li><li>变量名和等号之间不能有空格（分隔符）；</li><li>命名只能使用英文、数字和下划线且首个字符不能是数字；</li><li>不能使用关键字，可以使用 <code>bash -c help</code> 命令查看关键字；</li></ol><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个已经定义的变量只需要在变量名前加美元符号（$）即可，变量名两边的花括号（{}）可加可不加。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_name="test"</span><br><span class="line">echo $test_name</span><br><span class="line">echo $&#123;test_name&#125;</span><br></pre></td></tr></table></figure><p>注意无论您是否选择在变量名两边加入花括号请保持上下文编码规范的一致性。</p><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>可以使用 unset 命令删除变量，被删除的变量不能再次使用，unset 不能删除只读变量。</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>shell 中存在三类变量：</p><ol><li>局部变量：在脚本或命令中定义的变量，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量；</li><li>环境变量：所有程序（包括 shell 启动的程序）都能访问的变量，有些程序需要环境变量来保证正常运行；</li><li>shell 变量：由 shell 程序设定的特殊变量，有一部分是环境变量、一部分是局部变量，这些变量保证了 shell 程序的正常运行；</li></ol><p><img src="https://img.blanc.site//wiki/img/20210514012900.jpg" alt="shell 环境变量-引用自知乎@小晶"></p><h2 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 定义格式：array_name=(value1 value2 ... valuen)</span></span><br><span class="line">a=1</span><br><span class="line">my_array=("test" 2 "abc" $&#123;a&#125;)</span><br><span class="line">echo $&#123;my_array[0]&#125; # test</span><br><span class="line">echo $&#123;my_array[1]&#125; # 2</span><br><span class="line">echo $&#123;my_array[2]&#125; # abc</span><br><span class="line">echo $&#123;my_array[3]&#125; # 1</span><br><span class="line">echo $&#123;my_array[*]&#125; # test 2 abc 1 输出数组全部元素</span><br><span class="line">echo $&#123;my_array[@]&#125; # test 2 abc 1 输出数组全部元素</span><br><span class="line">echo $&#123;#my_array&#125;   # 4 输出数组长度</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历数组</span></span><br><span class="line">for i in $&#123;my_array[*]&#125;; do</span><br><span class="line">  echo $&#123;i&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for i in $&#123;my_array[@]&#125;; do</span><br><span class="line">  echo $&#123;i&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for (( i = 0; i &lt; $&#123;#my_array&#125;; i++ )) do</span><br><span class="line">  echo $&#123;my_array[i]&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>注：这里仅罗列了集中常见用法，如果想要了解更多数组操作可以查看 <a href="https://note.yuchaoshui.com/blog/post/yuziyue/shell%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93" target="_blank" rel="external nofollow noopener noreferrer">余子越：shell数组与字典总结</a>；</strong><br><strong>注2：该博文给出的特性本人并未全部测试，请先测试确定有效后再使用；</strong></p><h2 id="字典相关"><a href="#字典相关" class="headerlink" title="字典相关"></a>字典相关</h2><p><strong>本地测试失败，暂不整理。</strong></p><h2 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h2><h3 id="字符串变量定义时的单引号和双引号"><a href="#字符串变量定义时的单引号和双引号" class="headerlink" title="字符串变量定义时的单引号和双引号"></a>字符串变量定义时的单引号和双引号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">first_name="test"</span><br><span class="line">last_name1="test1 $&#123;first_name&#125;"</span><br><span class="line">last_name2='test1 $&#123;first_name&#125;'</span><br><span class="line"></span><br><span class="line">echo $&#123;last_name1&#125;  # test1 test</span><br><span class="line">echo $&#123;last_name2&#125;  # test1 $&#123;first_name&#125;</span><br></pre></td></tr></table></figure><p>在定义 shell 字符串变量时如果使用单引号包裹变量内容，则被包裹的部分会原样输出，如果使用双引号包裹变量内容，则在输出变量内容时会先解析变量内的变量、命令和转义字符。</p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">your_name="test"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 单引号拼接</span></span><br><span class="line">welcome1='hello, $&#123;your_name&#125; !'</span><br><span class="line">welcome2='hello, '$&#123;your_name&#125;' !'</span><br><span class="line">echo $&#123;welcome1&#125; # hello, $&#123;your_name&#125; !</span><br><span class="line">echo $&#123;welcome2&#125; # hello, test !</span><br><span class="line"><span class="meta">#</span><span class="bash"> 双引号拼接</span></span><br><span class="line">welcome3="hello, $&#123;your_name&#125; !"</span><br><span class="line">welcome4="hello, "$&#123;your_name&#125;" !"</span><br><span class="line">echo $&#123;welcome3&#125; # hello, test !</span><br><span class="line">echo $&#123;welcome4&#125; # hello, test !</span><br></pre></td></tr></table></figure><p>以上句式中：<br>welcome1 属于单引号字符串无法解析变量，<br>welcome2 属于字符串拼接，<br>welcome3 属于双引号解析字符串变量，<br>welcome4 属于字符串拼接。</p><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string="abcdefghijklmn"</span><br><span class="line">string2="这是一段中文字符串"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出字符串长度</span></span><br><span class="line">echo $&#123;#string&#125;     # 14</span><br><span class="line">echo $&#123;#string1&#125;    # 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取字符串，从下表 1 截取到下表 4</span></span><br><span class="line">echo $&#123;string:1:4&#125;  # bcde</span><br><span class="line">echo $&#123;string1:1:4&#125; # 无输出</span><br><span class="line">echo $&#123;string1&#125;     # 无输出</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在我的测试系统环境下无法对中文字符串进行操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 中文字符串操作具体逻辑我没有详细查询，感兴趣可以自己查询一下，估计是字符集的问题</span></span><br></pre></td></tr></table></figure><h2 id="基础语法相关"><a href="#基础语法相关" class="headerlink" title="基础语法相关"></a>基础语法相关</h2><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$&#123;n&#125;</span>：<span class="variable">$0</span> 表示命令本身，<span class="variable">$1</span>-<span class="variable">$9</span> 代表第 1 到第 9 个参数，10 以上加花括号，个人建议全部加花括号</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$&#123;*&#125;</span>：运行当前脚本时的所有参数，且把所有参数看做一个整体</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$&#123;@&#125;</span>：运行当前脚本时的所有参数，且把每个参数区别对待</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$&#123;#&#125;</span>：运行当前脚本时的所有参数个数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$&#123;$&#125;</span>：当前进程 PID</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$&#123;!&#125;</span>：在当前脚本中后台运行的最后一个进程 PID</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$&#123;?&#125;</span>：最后一次执行的命令返回状态，0 为执行正确，非 0 为执行错误</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试文件名称：test.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试命令 ./test.sh 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同目录下有一个输出 hello, world 的 hello.sh 文件</span></span><br><span class="line"></span><br><span class="line">echo $(dirname $&#123;0&#125;) # .</span><br><span class="line">echo $&#123;0&#125;            # ./test.sh</span><br><span class="line">echo $&#123;1&#125;            # 1</span><br><span class="line">echo $&#123;2&#125;            # 2</span><br><span class="line">echo $&#123;6&#125;            # 6</span><br><span class="line">echo $&#123;99&#125;           # 无输出</span><br><span class="line">echo $&#123;*&#125;            # 1 2 3 4 5 6 7 8 9</span><br><span class="line">echo $&#123;@&#125;            # 1 2 3 4 5 6 7 8 9</span><br><span class="line">echo $&#123;#&#125;            # 9</span><br><span class="line">echo $&#123;$&#125;            # 70149</span><br><span class="line">./hello.sh           # 注意：这里不会立即输出结果</span><br><span class="line">echo $&#123;!&#125;            # 70151</span><br><span class="line">echo $&#123;?&#125;            # 0</span><br><span class="line">                     # hello.sh 的输出结果 -&gt; hello, world</span><br></pre></td></tr></table></figure><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><h4 id="井号"><a href="#井号" class="headerlink" title="# | 井号"></a># | 井号</h4><p>注释符。如果一行脚本的开头是#（除了#!），那么代表这一行是注释，不会被执行。</p><h4 id="分号"><a href="#分号" class="headerlink" title="; | 分号"></a>; | 分号</h4><p>命令分隔符。允许在同一行内放置两条或更多的命令。</p><h4 id="冒号"><a href="#冒号" class="headerlink" title=": | 冒号"></a>: | 冒号</h4><p>空命令。它在 shell 中等价于 “NOP”（即no op，空操作）与 shell 内建命令 true 有同样的效果。它本身也是 Bash 的内建命令之一，返回值是 true（0）。</p><p>如果你学过 Python 的话，它很像 Python 中的 pass（个人感觉）。</p><h4 id="单组小括号"><a href="#单组小括号" class="headerlink" title="() | 单组小括号"></a>() | 单组小括号</h4><p>在<strong>新的子 shell （环境）里</strong>执行使用分号（;）隔开的一组命令，且最后一个命令<strong>可以不用分号</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试文件路径 /root/test.sh</span></span><br><span class="line"></span><br><span class="line">pwd            # /root</span><br><span class="line">(cd /etc;pwd)  # /etc</span><br><span class="line">pwd            # /root</span><br></pre></td></tr></table></figure><h4 id="花括号"><a href="#花括号" class="headerlink" title="{} | 花括号"></a>{} | 花括号</h4><p>在<strong>当前 shell （环境）里</strong>执行使用分号（;）隔开的一组命令，<strong>最后一个命令也需要加分号</strong>，且<strong>左括号和第一个命令之间必须有空格（分隔符）</strong>。</p><blockquote><p>代码块，又被称作内联组（inline group）。<br>它实际上创建了一个匿名函数（anonymous function），即没有名字的函数。<br>但是，不同于那些“标准”函数，代码块内的变量在脚本的其他部分仍旧是可见的。</p><p><a href="https://linuxstory.gitbook.io/advanced-bash-scripting-guide-in-chinese/" target="_blank" rel="external nofollow noopener noreferrer">Advanced Bash-Scripting Guide-中文版</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试文件路径 /root/test.sh</span></span><br><span class="line"></span><br><span class="line">pwd                # /root</span><br><span class="line">&#123; cd /etc; pwd; &#125;  # /etc</span><br><span class="line">pwd                # /etc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意 &#123; <span class="built_in">cd</span> /etc; <span class="built_in">pwd</span>; &#125; 命令中，除了 &#123; 和 c 之间 以及 <span class="built_in">cd</span> 和 / 之间的空格是必须的其他空格都可省略</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### $() 和 ``</span></span></span><br><span class="line"></span><br><span class="line">二者都可用于「命令替换」，所谓命令替换与前面变量章节提到的变量替换类似，即完成区域内部的命令并将结果替换出来和当前命令行重组。</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">echo "today is $(date +%Y-%m-%d)" # today is 2021-05-15</span><br><span class="line">echo "today is `date +%Y-%m-%d`"  # today is 2021-05-15</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行逻辑是：先运行命令 date +%Y-%m-%d 然后将结果和原先命令所在的位置进行替换，程序执行时实际运行的是替换后的语句</span></span><br></pre></td></tr></table></figure><p>比较推荐使用 $() 这种形式，理由有：</p><ol><li>反引号（``）容易与单引号（’’）混淆；</li><li>在复合命令替换中，使用反引号（``）需要进行额外的转义</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=`command1 \`command2\` `</span><br><span class="line">b=$(command1 $(command2))</span><br></pre></td></tr></table></figure><p>但是 $() 不能支持全部 shell（但 bash 中是可以用的），而反引号（``）基本上可以在所有 unix shell 中使用。</p><h4 id="和-双组小括号"><a href="#和-双组小括号" class="headerlink" title="(()) 和 $(()) | 双组小括号"></a>(()) 和 $(()) | 双组小括号</h4><p>(()) 的特性：与 let 命令类似，允许对算术表达式的扩展和求值，是 let 命令的简化形式。</p><p>(()) 单独使用时的一些作用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">(( b = 10 + a ))  # C 语言风格变量赋值， = 前后都有空格</span><br><span class="line">echo $&#123;b&#125;         # 13</span><br><span class="line">(( b-- ))</span><br><span class="line">echo $&#123;b&#125;         # 12</span><br><span class="line">(( b++ ))</span><br><span class="line">echo $&#123;b&#125;         # 13</span><br><span class="line">(( ++b ))</span><br><span class="line">echo $&#123;b&#125;         # 14</span><br><span class="line">(( --b ))</span><br><span class="line">echo $&#123;b&#125;         # 13</span><br><span class="line"></span><br><span class="line">(( t = b &lt; 45 ? 7 : 11 ))</span><br><span class="line"></span><br><span class="line">echo $&#123;t&#125;         # 7</span><br></pre></td></tr></table></figure><p>(()) 配合其他语句使用时的一些例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">for (( i = 0; i &lt; 5; i++)); do</span><br><span class="line">  echo $&#123;i&#125;    # 依次输出 0 1 2 3 4</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if (( 1 + 2 )); then</span><br><span class="line">  echo "true"  # true</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if !(( 1 - 1 )); then</span><br><span class="line">  echo "false" # false</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if (( 3 &gt; 2 )); then</span><br><span class="line">  echo "3 &gt; 2" # 3 &gt; 2 在 if 语句下可以使用双圆括号直接进行数值比较</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>$(()) 的作用：整数运算（不支持浮点数）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> $(()) 中支持 + - * / % &amp; | ^ !</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此外，$(()) 还可用作不同进制的运算，但只能输出十进制结果</span></span><br><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line">c=3</span><br><span class="line">echo $(( a + b ))         # 3</span><br><span class="line">echo $(( c - a ))         # 2</span><br><span class="line">echo $(( a * c ))         # 3</span><br><span class="line">echo $(( c / a ))         # 3</span><br><span class="line">echo $(( c / b ))         # 1 可见这里的取整方式是直接抛弃小数点后面的数</span><br><span class="line">echo $(( c % a ))         # 0</span><br><span class="line">echo $(( (a + b) * c ))   # 9</span><br><span class="line">echo $(( a &amp; b ))         # 0</span><br><span class="line">echo $(( a | b ))         # 3</span><br><span class="line">echo $(( a ^ b ))         # 3</span><br><span class="line">echo $(( !a ))            # 0</span><br><span class="line">echo $(( 16#2a ))         # 42 这里是将 16 进制的 2a 转化成了十进制的 42</span><br></pre></td></tr></table></figure><h4 id="单组中括号"><a href="#单组中括号" class="headerlink" title="[] | 单组中括号"></a>[] | 单组中括号</h4><p>在 shell 中 <code>[ expr ]</code> <strong>（注意：左右中括号和命令之间都有空格）</strong>等同于命令 <code>test expr</code>，主要用于：数值判断、文件判断和字符串判断。</p><p>test 和 [] 中可用的比较运算符只有 = 和 !=，要比较大小则只能使用 <code>test 3 -eq 4</code> 或 <code>[ 3 -eq 4 ]</code> 这种形式</p><ol><li>数值判断</li></ol><table><thead><tr><th align="center">参数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">A -eq B</td><td align="center">判断 A 是否等于 B</td></tr><tr><td align="center">A -ne B</td><td align="center">判断 A 是否不等于 B</td></tr><tr><td align="center">A -gt B</td><td align="center">判断 A 是否大于 B</td></tr><tr><td align="center">A -ge B</td><td align="center">判断 A 是否大于等于 B</td></tr><tr><td align="center">A -lt B</td><td align="center">判断 A 是否小于 B</td></tr><tr><td align="center">A -le B</td><td align="center">判断 A 是否小于等于 B</td></tr></tbody></table><p><strong>注：A 和 B 为任意数值或数值变量</strong></p><ol start="2"><li>文件判断</li></ol><table><thead><tr><th align="center">参数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-e filename</td><td align="center">判断文件是否存在</td></tr><tr><td align="center">-r filename</td><td align="center">判断文件是否可读</td></tr><tr><td align="center">-w filename</td><td align="center">判断文件是否可写</td></tr><tr><td align="center">-x filename</td><td align="center">判断文件是否可执行</td></tr><tr><td align="center">-s filename</td><td align="center">判断文件是否存在且至少有一个字符</td></tr><tr><td align="center">-d filename</td><td align="center">判断文件是否存在且为目录文件</td></tr><tr><td align="center">-f filename</td><td align="center">判断文件是否存在且为普通文件</td></tr><tr><td align="center">-c filename</td><td align="center">判断文件是否存在且为字符型特殊文件</td></tr><tr><td align="center">-b filename</td><td align="center">判断文件是否存在且为块特殊文件</td></tr></tbody></table><p><strong>注：filename 为完整（但可以是相对也可以是绝对）文件路径或文件路径变量</strong></p><ol><li>字符串判断</li></ol><table><thead><tr><th align="center">参数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">stringA = stringB</td><td align="center">判断 stringA 是否等于 stringB</td></tr><tr><td align="center">stringA == stringB</td><td align="center">判断 stringA 是否等于 stringB</td></tr><tr><td align="center">stringA != stringB</td><td align="center">判断 stringA 是否不等于 stringB</td></tr><tr><td align="center">-z stringA</td><td align="center">判断 stringA 长度是否为零</td></tr><tr><td align="center">-n stringA</td><td align="center">判断 stringA 长度是否不为零</td></tr></tbody></table><p><strong>注：stringA 和 stringB 代表任意字符串或字符串变量</strong></p><h4 id="双组中括号"><a href="#双组中括号" class="headerlink" title="[[]] | 双组中括号"></a>[[]] | 双组中括号</h4><p>[[]] 并非 shell 通用关键字，但大多数常用 shell 都支持，与 [] 相比，[[]] 更加常用。</p><p>[[]] 支持字符串的模式匹配，使用 == 操作符时还支持 shell 的正则表达式，字符串在比较的时候可以将等号右边的内容当做一个正则表达式的匹配模式，而不仅仅是一个字符串，例如 <code>[[ hello == hell? ]]</code> 的结果为 true，[[]] 中匹配字符串或通配符不需要引号。</p><p>在 if 语句中使用 [[]] 可以直接在判断语句中使用 &amp;&amp; || 等操作符，但在 [] 中会报错，例如 <code>if [[ ${a} == 1 &amp;&amp; ${a} != 2 ]]</code>，如果使用 [] 则需写成 <code>if [ ${a} -ne 1 ] &amp;&amp; [ ${a} != 2 ]</code> 或者 <code>if [ ${a} -ne 1 -a ${a} != 2]</code>。</p><p><strong>注：在 [[]] 中使用 &lt; &gt; 是基于字符串进行判断的，例如 <code>[[ 321 &gt; 1234 ]]</code> 输出为真，因为按照字符串来判断，3 大于 1</strong></p><p>在支持 [[]] 的 shell 中会把它内部的表达式当做一个单独的元素，并返回一个退出状态码（0 为真，1 为假）。 </p><h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><h4 id="基本读取"><a href="#基本读取" class="headerlink" title="基本读取"></a>基本读取</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo -n "Enter your name: " # -n 的作用是不换行</span><br><span class="line">read name</span><br><span class="line">echo "hello $&#123;name&#125;, welcome to my program"</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h4 id="read-参数"><a href="#read-参数" class="headerlink" title="read 参数"></a>read 参数</h4><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">后面跟一个变量，该变量会被认为是一个数组，通过 read 给其赋值，默认以空格为分隔符</td></tr><tr><td align="center">-d</td><td align="center">后面跟一个标志符，作为结束的标志</td></tr><tr><td align="center">-p</td><td align="center">后面根提示信息，在输入前打印提示信息</td></tr><tr><td align="center">-e</td><td align="center">输入的时候打开自动补全功能</td></tr><tr><td align="center">-n</td><td align="center">后面跟一个数字，定义输入文本长度</td></tr><tr><td align="center">-r</td><td align="center">屏蔽 \，如果没有该选项 \ 会被认为是转义符，如果有的话会被认为是正常字符</td></tr><tr><td align="center">-s</td><td align="center">安静模式，输入字符时不在屏幕上显示，常用于密码输入</td></tr><tr><td align="center">-t</td><td align="center">后面跟秒数，定义输入字符的等待时间</td></tr><tr><td align="center">-u</td><td align="center">后面跟 fd，从文件描述符中读入</td></tr></tbody></table><h2 id="函数语法相关"><a href="#函数语法相关" class="headerlink" title="函数语法相关"></a>函数语法相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基础语法格式</span></span><br><span class="line">function function_name() &#123;</span><br><span class="line">    command(s)...</span><br><span class="line">    [ return value ] # 用 [] 框起来表示此语句可选</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 函数返回值，可以显式增加 <span class="built_in">return</span> 语句；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不加，会将最后一条命令运行结果作为返回值。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 函数在定义时无需在 function_name() 的 () 中写入具体参数，而是通过 <span class="variable">$&#123;1&#125;</span> <span class="variable">$&#123;2&#125;</span> 的形式对参数进行调用</span></span><br><span class="line"></span><br><span class="line">name param1 param2 param3</span><br></pre></td></tr></table></figure><h2 id="流程控制相关"><a href="#流程控制相关" class="headerlink" title="流程控制相关"></a>流程控制相关</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基本语法格式</span></span><br><span class="line">if [ condition ]; then   </span><br><span class="line">  command(s)...</span><br><span class="line">elif [ condition ]; then </span><br><span class="line">  command(s)...</span><br><span class="line">else</span><br><span class="line">  command(s)...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [ $&#123;1&#125; -ge 60 ]; then</span><br><span class="line">  echo "及格"</span><br><span class="line">elif [ $&#123;1&#125; -lt 60 ]; then</span><br><span class="line">  echo "不及格" </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基本语法格式</span></span><br><span class="line">case $&#123;variable&#125; in</span><br><span class="line">  "condition1")</span><br><span class="line">    command...</span><br><span class="line">    ;;</span><br><span class="line">  "condition1")</span><br><span class="line">    command...</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  *)</span><br><span class="line">    command...</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 实例</span></span><br><span class="line">case $&#123;1&#125; in</span><br><span class="line">  "1")</span><br><span class="line">    echo 周一</span><br><span class="line">    ;;</span><br><span class="line">  "2")</span><br><span class="line">    echo 周二</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    echo 其它</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 简写</span></span><br><span class="line">case $&#123;1&#125; in</span><br><span class="line">  "1") echo 周一 ;;</span><br><span class="line">  "2") echo 周二 ;;</span><br><span class="line">  *) echo 其它 ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="循环语法相关"><a href="#循环语法相关" class="headerlink" title="循环语法相关"></a>循环语法相关</h2><p>循环是当循环控制条件为真时，一系列命令迭代执行的代码块。</p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">my_array=("test" 2 "abc" $&#123;a&#125;)</span><br><span class="line"></span><br><span class="line">for i in $&#123;my_array[*]&#125;; do</span><br><span class="line">  echo $&#123;i&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for (( i = 0; i &lt; $&#123;#my_array&#125;; i++ )) do</span><br><span class="line">  echo $&#123;my_array[i]&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for i in "test" 2 "abc" $&#123;a&#125;; do</span><br><span class="line">  echo $&#123;i&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p>while 循环结构会在循环顶部检测循环条件，若循环条件为真（退出状态为 0）则循环持续进行。<br>与 for 循环 不同的是，while 循环是在不知道循环次数的情况下使用的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line">i=0</span><br><span class="line"></span><br><span class="line">while [[ $&#123;i&#125; -le 100 ]]; do</span><br><span class="line">  sum=$(( sum + i ))</span><br><span class="line">  (( i++ ))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo $&#123;sum&#125; # 5050</span><br></pre></td></tr></table></figure><h3 id="util-循环"><a href="#util-循环" class="headerlink" title="util 循环"></a>util 循环</h3><p>与 while 循环相反，until 循环测试其顶部的循环条件，直到其中的条件为真时停止。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line">i=0</span><br><span class="line"></span><br><span class="line">until [[ $&#123;i&#125; -gt 100 ]]; do</span><br><span class="line">  sum=$(( sum + i ))</span><br><span class="line">  (( i++ ))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo $&#123;sum&#125; # 5050</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本来就是想简单的整理一下 shell 的常用基础语法，没想到越整理接触到的概念越多，导致我要往这篇文章里塞入的东西也越来越多，当你读完以上文章内容，不过是接触到了 shell 语法的冰山一角。它还有很多基础语法是我没有整理到位的，也有很多进阶应用是这篇文章不应涉及但却十分重要的，毕竟 shell 非常接近 Unix 系统内核，因此如果你想要系统的学习 shell 还请根据自身情况参考我在 <a href="#前言">前言</a> 中给出的书籍进行学习。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.runoob.com/linux/linux-shell-variable.html" target="_blank" rel="external nofollow noopener noreferrer">菜鸟教程：Shell 变量</a></li><li><a href="https://www.runoob.com/linux/linux-shell-test.html" target="_blank" rel="external nofollow noopener noreferrer">菜鸟教程：Shell test 命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-read.html" target="_blank" rel="external nofollow noopener noreferrer">菜鸟教程：Linux read 命令</a></li><li><a href="https://wiki.jikexueyuan.com/project/13-questions-of-shell/" target="_blank" rel="external nofollow noopener noreferrer">Zhongbo Wang：Shell 十三问</a></li><li><a href="https://www.cnblogs.com/hkui/p/6423918.html" target="_blank" rel="external nofollow noopener noreferrer">梦想远航：shell中的(),{}几种语法用法</a></li><li><a href="https://blog.csdn.net/yjk13703623757/article/details/79028738" target="_blank" rel="external nofollow noopener noreferrer">Locutus：Shell编程中的用户输入处理…</a></li><li><a href="https://zhuanlan.zhihu.com/p/102176365" target="_blank" rel="external nofollow noopener noreferrer">知乎-小晶：掌握Shell编程，一篇就够了</a></li><li><a href="https://linuxstory.gitbook.io/advanced-bash-scripting-guide-in-chinese/" target="_blank" rel="external nofollow noopener noreferrer">Advanced Bash-Scripting Guide-中文版</a></li><li><a href="https://www.cnblogs.com/chengd/p/7803664.html" target="_blank" rel="external nofollow noopener noreferrer">chengd：Linux—shell中$(( ))、$( )、``与${ }的区别</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文只是对 shell 脚本语言中一些常用的基础语法进行汇总整理，如果你真的想系统的学习 shell 脚本编程，这里推荐两本电子读物：&lt;/p
      
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="1-理论计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="4-编程语言和编译器" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/4-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
      <category term="Shell" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/4-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8/Shell/"/>
    
    
      <category term="Shell" scheme="https://wiki.blanc.site/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>块加密的工作模式</title>
    <link href="https://wiki.blanc.site/archives/a45966e2.html"/>
    <id>https://wiki.blanc.site/archives/a45966e2.html</id>
    <published>2021-05-08T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="块加密"><a href="#块加密" class="headerlink" title="块加密"></a>块加密</h2><p>块加密，也成分组加密，是一类对称密钥加密算法。它将明文分成多个等长的块，使用确定的算法和对称密钥对每组数据块分别进行加密解密。</p><p>常见的块加密算法有：DES，3DES</p><h2 id="块密码工作模式"><a href="#块密码工作模式" class="headerlink" title="块密码工作模式"></a>块密码工作模式</h2><p>块密码工作模式允许使用同一个分组密码密钥对多于一块的数据进行加密并保证密文的安全性。单次运行块密码算法只能加密长度等于密码分组长度的单块数据，如果需要加密的数据边长，则数据必须先被划分为一些单独的密码块。通常而言，最后一块数据还需要使用合适的填充方式将数据扩展到符合算法要求的长度。</p><p>一种工作模式描述了加密一个长明文的每一个数据块的过程，并常常使用一个被称为初始化向量的附加输入值对加密过程进行随机化提高安全性。</p><h3 id="ECB-模式（Electronic-Codebook）-电子密码本模式"><a href="#ECB-模式（Electronic-Codebook）-电子密码本模式" class="headerlink" title="ECB 模式（Electronic Codebook） | 电子密码本模式"></a>ECB 模式（Electronic Codebook） | 电子密码本模式</h3><p>最简单的工作模式，加密前根据加密块大小将明文分成若干块，之后对每个明文块进行加密，拼接后输出密文。解密同理。</p><p>优点：可并行运算、速度快、易于标准化、明文传输错误不会扩大到影响整个数据区域。</p><p>缺点：</p><ol><li>相同的明文生成相同的密文块；</li><li>通过删除、替换密文分组可以对明文进行操作；</li><li>不能抵御重放攻击；</li><li>不能很好的隐藏数据模式；</li></ol><h3 id="CBC-模式（Cipher-block-Chaining）-密码块链接"><a href="#CBC-模式（Cipher-block-Chaining）-密码块链接" class="headerlink" title="CBC 模式（Cipher-block Chaining） | 密码块链接"></a>CBC 模式（Cipher-block Chaining） | 密码块链接</h3><p>每个明文块先与前一个密文块进行异或运算再进行加密，第一块明文与初始向量 IV 进行异或运算。</p><p>优点：</p><ol><li>明文的数据特征不会反应在密文中；</li><li>解密过程支持并行（因为解密时已经知道每一块密文块的内容）；</li></ol><p>缺点：</p><ol><li>加密计算过程是串行的（因为后一次运算需要前一次运算的结果）；</li><li>如果明文在传输过程中出错，错误会向后传递；</li></ol><h3 id="PCBC-模式（Propagating-Cipher-block-Chaining）-填充密码块链接"><a href="#PCBC-模式（Propagating-Cipher-block-Chaining）-填充密码块链接" class="headerlink" title="PCBC 模式（Propagating Cipher-block Chaining）| 填充密码块链接"></a>PCBC 模式（Propagating Cipher-block Chaining）| 填充密码块链接</h3><p>PCBC 模式是一种可以使密文中微小更改在解密时导致明文大部分错误的模式，并且在加密是也具有同样的特征。</p><p>PCBC 主要用于 Kerberos v4 和 WASTE 中。</p><h3 id="CFB-模式（Cipher-Feedback）-密文反馈"><a href="#CFB-模式（Cipher-Feedback）-密文反馈" class="headerlink" title="CFB 模式（Cipher Feedback） | 密文反馈"></a>CFB 模式（Cipher Feedback） | 密文反馈</h3><p>密文反馈模式是一种接近于流密码的工作模式，他不用 DES 加密明文，而是把 DES 作为一个随机数生成器，把初始向量 IV 作为种子。这样就可以从初始向量 IV 和指定 key 生成字节流，让后把明文与这个字节流进行异或。</p><p>CFB 模式每次加密明文的一个字节，因此 CFP 模式不需要对明文进行填充。</p><p>优点：</p><ol><li>不需要填充；</li><li>解密过程支持并行运算；</li></ol><p>缺点：</p><ol><li>加密过程不支持并行运算；</li><li>明文中的错误会向后传递；</li><li>不能抵御重放攻击；</li></ol><h3 id="OFB-模式（Output-Feedback）-输出反馈"><a href="#OFB-模式（Output-Feedback）-输出反馈" class="headerlink" title="OFB 模式（Output Feedback） | 输出反馈"></a>OFB 模式（Output Feedback） | 输出反馈</h3><p>OFB 模式是先用块加密器生成密钥流，然后再将密钥流与明文流进行异或运算得到密文流；解密时先用块加密器生成密钥流，再将密钥流与密文流异或得到明文，由于异或操作的对称性所以加密和解密的流程是完全一样的。</p><p>可以利用输入为全 0 的 CBC 模式产生 OFB 模式的密钥流，这个过程可以利用快速 CBC 硬件实现来加速 OFB 模式的加密过程。</p><p>优点：</p><ol><li>不需要填充；</li><li>可以提前准备加密或解密需要的密钥；</li><li>加密、解密使用相同结构；</li><li>对包含某些错误比特的密文进行解密时，只有明文中相应的比特会出错；</li></ol><p>缺点：</p><ol><li>不支持并行运算；</li><li>主动攻击密文的某一（些）比特时，明文中对应位置的比特也会发生变换；</li></ol><h3 id="CTR-模式（Counter-Mode）"><a href="#CTR-模式（Counter-Mode）" class="headerlink" title="CTR 模式（Counter Mode）"></a>CTR 模式（Counter Mode）</h3><p>CTR 模式也被称为 ICM 模式（Integer Counter Mode，整数计数模式）或 SIC 模式（Segmented Integer Counter），与 OFB 相似，CTR 将块密码变为流密码。它通过递增一个加密计数器以产生连续的密钥流，其中，计数器可以是任意保证长时间不产生重复输出的函数，但使用一个普通的计数器是最简单和最常见的做法。</p><p>CTR 模式的特征类似于 OFB，但它允许在解密时进行随机存取。由于加密和解密过程均可以进行并行处理，CTR 适合运用于多处理器的硬件上。</p><p>优点：</p><ol><li>不需要填充；</li><li>可以事先准备加密解密需要的密钥；</li><li>加密和解密结构相同；</li><li>支持并行计算；</li></ol><p>缺点：</p><ol><li>主动攻击反转密文分组中的某些比特时，解密出的明文中相同位置的数据也会被反转；</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.ruanx.net/block-cipher-mode/" target="_blank" rel="external nofollow noopener noreferrer">Pionee1eer：块加密的工作模式</a></li><li><a href="https://blog.csdn.net/a745233700/article/details/102311776" target="_blank" rel="external nofollow noopener noreferrer">张维鹏：对称加密算法之分组加密的六种工作模式…</a></li><li><a href="https://www.cnblogs.com/Terry-Wu/p/10314070.html" target="_blank" rel="external nofollow noopener noreferrer">HappyDeveloper：对称加密算法的几种模式优缺点一览</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81" target="_blank" rel="external nofollow noopener noreferrer">维基百科：分组密码</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F" target="_blank" rel="external nofollow noopener noreferrer">维基百科：分组密码工作模式</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;块加密&quot;&gt;&lt;a href=&quot;#块加密&quot; class=&quot;headerlink&quot; title=&quot;块加密&quot;&gt;&lt;/a&gt;块加密&lt;/h2&gt;&lt;p&gt;块加密，也成分组加密，是一类对称密钥加密算法。它将明文分成多个等长的块，使用确定的算法和对称密钥对每组数据块分别进行加密解密。&lt;/p
      
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="2-计算机系统" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="5-计算机安全和密码学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/5-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8%E5%92%8C%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="计算机安全和密码学" scheme="https://wiki.blanc.site/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8%E5%92%8C%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>dmidecode 解析</title>
    <link href="https://wiki.blanc.site/archives/89447a6c.html"/>
    <id>https://wiki.blanc.site/archives/89447a6c.html</id>
    <published>2021-04-05T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>dmidecode 命令能够获取 Linux 系统下有关硬件方面的信息。</p><p>dmidecode 是将 DMI 数据库中的信息解码，以可读文本方式显示，由于 DMI 信息可以认为修改，因此里面的信息不一定是系统准确的信息。</p><p>dmidecode 遵循 SMBIOS/DMI 标准，其输出的信息包括 BIOS、系统、主板、处理器、内存、缓存等等。</p><h3 id="DMI"><a href="#DMI" class="headerlink" title="DMI"></a>DMI</h3><p>桌面管理接口（Desktop Management Interface, DMI）</p><h3 id="SMBIOS-DMI"><a href="#SMBIOS-DMI" class="headerlink" title="SMBIOS/DMI"></a>SMBIOS/DMI</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;dmidecode 命令能够获取 Linux 系统下有关硬件方面的信息。&lt;/p&gt;
&lt;p&gt;dmidecode 是将 DMI 数据库中的信息解码
      
    
    </summary>
    
    
      <category term="2-软件使用" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="命令行工具" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    
      <category term="dmidecode" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/dmidecode/"/>
    
    
      <category term="命令行工具" scheme="https://wiki.blanc.site/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    
      <category term="dmidecode" scheme="https://wiki.blanc.site/tags/dmidecode/"/>
    
  </entry>
  
  <entry>
    <title>Cisco IOS 系列-0-概览</title>
    <link href="https://wiki.blanc.site/archives/3bd55461.html"/>
    <id>https://wiki.blanc.site/archives/3bd55461.html</id>
    <published>2021-04-05T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Cisco Internetwork Operating System(IOS) 是思科公司为其网络设备开发的操作维护系统。用户可以通过命令行界面对网络设备进行功能设定，提供的功能大致为一下几点：</p><ol><li>网络设备及连接端口的功能参数设置；</li><li>设置、运行网络协议和网络功能；</li><li>设备间资料传输；</li><li>安全管理；</li></ol><p>来自<a href="https://zh.wikipedia.org/wiki/%E6%80%9D%E7%A7%91IOS" target="_blank" rel="external nofollow noopener noreferrer">维基百科：思科IOS</a></p></blockquote><h2 id="路由器组件及功能"><a href="#路由器组件及功能" class="headerlink" title="路由器组件及功能"></a>路由器组件及功能</h2><h2 id="设备管理方法"><a href="#设备管理方法" class="headerlink" title="设备管理方法"></a>设备管理方法</h2><p>可通过多种方法访问 CLI 环境，最常用的方法有：</p><ol><li>通过 Console 接口管理设备</li><li>通过 Telnet 或 SSH 远程管理设备</li><li>辅助端口</li></ol><h2 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h2><p><img src="https://img.blanc.site//wiki/img/20210415111913.png" alt="操作模式"></p><h3 id="用户执行模式-用户模式"><a href="#用户执行模式-用户模式" class="headerlink" title="用户执行模式 | 用户模式"></a>用户执行模式 | 用户模式</h3><p>正常登陆设备 CLI 后的默认配置模式，只具备最基本的查看权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cisco&gt; ...</span><br></pre></td></tr></table></figure><h3 id="特权执行模式-特权模式"><a href="#特权执行模式-特权模式" class="headerlink" title="特权执行模式 | 特权模式"></a>特权执行模式 | 特权模式</h3><p>通过用户认证后即可进入特权模式，能够查看当前设备的全部配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cisco# ...</span><br></pre></td></tr></table></figure><h3 id="全局配置模式"><a href="#全局配置模式" class="headerlink" title="全局配置模式"></a>全局配置模式</h3><p>在特权模式下，使用命令 <code>config terminal</code> 进入全局配置模式，在此模式下可配置设备全局参数，开启或关闭设备全局特性或功能；也可从此模式进入多种不同的其他子配置模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cisco(config)# ...</span><br></pre></td></tr></table></figure><h3 id="其他配置模式"><a href="#其他配置模式" class="headerlink" title="其他配置模式"></a>其他配置模式</h3><h4 id="line-模式-线路模式、行模式"><a href="#line-模式-线路模式、行模式" class="headerlink" title="line 模式 | 线路模式、行模式"></a>line 模式 | 线路模式、行模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cisco(config)# line ...</span><br><span class="line">cisco(cofnig-line)# ...</span><br><span class="line"></span><br><span class="line">cisco(config)# line ?</span><br><span class="line">可以通过如上命令查看 line 模式下支持的配置选项</span><br></pre></td></tr></table></figure><h4 id="interface-模式-接口模式"><a href="#interface-模式-接口模式" class="headerlink" title="interface 模式 | 接口模式"></a>interface 模式 | 接口模式</h4><p>针对设备的某一类端口（可以针对某一具体端口也可针对某一类端口的多个端口）进行配置，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cisco(config)# interface ...</span><br><span class="line">cisco(config-if)# ...</span><br><span class="line"></span><br><span class="line">cisco(config)# interface ?</span><br><span class="line">可以通过如上命令查看 interface 模式下支持的配置选项</span><br></pre></td></tr></table></figure><h4 id="router-模式-路由进程配置模式"><a href="#router-模式-路由进程配置模式" class="headerlink" title="router 模式 | 路由进程配置模式"></a>router 模式 | 路由进程配置模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cisco(config)# router ...</span><br><span class="line">cisco(config-router)# ...</span><br><span class="line"></span><br><span class="line">cisco(config)# router ?</span><br><span class="line">可以通过如上命令查看 router 模式下支持的配置选项</span><br></pre></td></tr></table></figure><h2 id="使用-CLI-帮助"><a href="#使用-CLI-帮助" class="headerlink" title="使用 CLI 帮助"></a>使用 CLI 帮助</h2><p><img src="https://img.blanc.site//wiki/img/20210415114649.png" alt="Cisco IOS 命令结构"></p><h3 id="命令提示及补全"><a href="#命令提示及补全" class="headerlink" title="命令提示及补全"></a>命令提示及补全</h3><h4 id="命令提示"><a href="#命令提示" class="headerlink" title="命令提示"></a>命令提示</h4><p>Cisco IOS 系统的命令提示符是 <code>?</code><br>在命令未输入完成之前输入 <code>?</code> 系统会提示你所有可能的命令<br>在命令输入完成后输入 <code>?</code> 系统会提示你所有当前命令可接参数形式以及具体功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">R1(config)# c?</span><br><span class="line">cdp class-map clock config-register crypto</span><br><span class="line"></span><br><span class="line">R1(config)# router ?</span><br><span class="line">bgp     .... </span><br><span class="line">eigrp   ....</span><br><span class="line">ospf    ....</span><br><span class="line">rip     ....</span><br></pre></td></tr></table></figure><h4 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h4><p>Cisco IOS 系统的命令补全按钮是 Tab 键</p><h3 id="命令语法检查"><a href="#命令语法检查" class="headerlink" title="命令语法检查"></a>命令语法检查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">R1(config)# router ospf</span><br><span class="line">% Incomplete command. &#x2F;&#x2F; 命令不完整</span><br><span class="line"></span><br><span class="line">R1(config)# router ospd 1</span><br><span class="line">                      ^</span><br><span class="line">% Invalid input detected at &#39;^&#39; marker.  &#x2F;&#x2F; 箭头所指字符无法识别</span><br><span class="line"></span><br><span class="line">R1(config)#s</span><br><span class="line">% Ambiguous command: &quot;s&quot; &#x2F;&#x2F; 未知的输入</span><br></pre></td></tr></table></figure><h3 id="热键和快捷方式"><a href="#热键和快捷方式" class="headerlink" title="热键和快捷方式"></a>热键和快捷方式</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/wiki/%E6%80%9D%E7%A7%91IOS" target="_blank" rel="external nofollow noopener noreferrer">维基百科：思科 IOS</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Cisco Internetwork Operating System(IOS) 是思科公司为其网络设备开发的操作
      
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="2-计算机系统" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="2-操作系统" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="CiscoIOS" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/CiscoIOS/"/>
    
    
      <category term="Cisco IOS" scheme="https://wiki.blanc.site/tags/Cisco-IOS/"/>
    
      <category term="系列文章" scheme="https://wiki.blanc.site/tags/%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>8086 处理器寻址方式</title>
    <link href="https://wiki.blanc.site/archives/4940711f.html"/>
    <id>https://wiki.blanc.site/archives/4940711f.html</id>
    <published>2021-02-14T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要描述了何为寻址，寻址能力的计算以及 8086 处理器的寻址方式有哪些。</p><h2 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h2><h3 id="什么是寻址？"><a href="#什么是寻址？" class="headerlink" title="什么是寻址？"></a>什么是寻址？</h3><p>内存中每一个字节（8bit）都有一个对应的内存地址，CPU 去访问某一具体内存地址的过程称为寻址。</p><h3 id="寻址能力与什么有关？"><a href="#寻址能力与什么有关？" class="headerlink" title="寻址能力与什么有关？"></a>寻址能力与什么有关？</h3><p>CPU 的寻址能力一般使用寻址空间来表示，寻址空间的大小决定了 CPU 可支持的最大内存容量，以字节为单位。寻址空间的大小由地址总线的地址寄存器宽度（位数）决定，假设地址总线位数为 N 位，则寻址空间为 2 的 N 次方字节（因为计算机使用的是二进制所以是 2 的 N 次方）。</p><h3 id="特殊的-8086-处理器"><a href="#特殊的-8086-处理器" class="headerlink" title="特殊的 8086 处理器"></a>特殊的 8086 处理器</h3><p>8086 处理器有 20 位地址总线，可传送 20 位的地址，寻址空间为 1M。</p><p>而 8086 处理器是 16 位结构的处理器即 8086 内部的寄存器位数为 16 位，如果按照这个数据处理能力 8086 只能发送出 16 位的地址，表现出的寻址能力只有 64 KB。</p><p>为了解决上述问题，在 8086 处理器内部采用了一种使用两个 16 位地址（段地址：偏移地址）合成一个 20 位物理地址的方案。</p><p>具体计算公式为：物理地址 = 段地址左移四位 + 偏移地址</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>在汇编语言中，一般的指令格式为：指令代码 目的操作数,源操作数</p><p>目的操作数和源操作数统称为操作数，而寻址方式的主要表现形式就是体现在两个操作数的表现形式上</p><h2 id="8086-处理器的寻址方式"><a href="#8086-处理器的寻址方式" class="headerlink" title="8086 处理器的寻址方式"></a>8086 处理器的寻址方式</h2><p>8086 处理器有七种基本寻址方式：</p><h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><p>指令执行时，操作数位于寄存器中，可以直接从寄存器中获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,cx     ; 此条指令中目的操作数和源操作数使用的都是寄存器寻址</span><br><span class="line">add bx,0xf000 ; 此条指令中目的操作数使用的是寄存器寻址，源操作数使用的是后面要介绍的直接寻址</span><br><span class="line">inc dx        ; 这是一条比较特殊的指令，它有目的操作数，这里使用的是寄存器寻址</span><br></pre></td></tr></table></figure><h3 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h3><p>立即寻址又称为立即数寻址，指的是操作数为立即数的寻址方式。</p><p>所谓立即数指的是直接包含在指令中且紧跟在操作码后可以立即从指令中获取的操作数。</p><p>在立即寻址中立即数可以是 8位的，也可以是 16位的（<strong>注意我们的大前提是在 8086 处理器下</strong>）。这种寻址方式主要用于给寄存器或存储单元赋初始值，立即寻址是这七种基本寻址方式中速度最快的寻址方式。</p><p><strong>注：在实例代码中会有一个特殊的立即寻址例子。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,oxf000   ; 此条指令中目的操作数使用的是寄存器寻址，源操作数采用的是立即寻址</span><br><span class="line">mov ax,label_a  ; 注意此条指令的源操作数，它采用的也是立即寻址，这里的 &#96;label_a&#96; 虽然是一个标号但是标号是数值的等价形式，它代表了所在位置的汇编地址，在编译阶段被转换为一个立即数</span><br></pre></td></tr></table></figure><h3 id="内存寻址"><a href="#内存寻址" class="headerlink" title="内存寻址"></a>内存寻址</h3><p>寄存器寻址的操作数位于寄存器中，立即寻址的操作数位于指令中，是指令的一部分。这是两种速度比较快的寻址方式，但它们也有局限性：一方面，我们不可能总是知道要操作的数是多少，因此也就不可能总是在指令上使用立即数；另一方面，寄存器的数量有限，不可能总指望在寄存器之间来回传递数据。</p><p>考虑到内存容量大，所以在指令中使用内存地址来操作内存中的数据是比较理想的方案。</p><p>在正式介绍内存寻址之前需要先理解一个概念：<strong>有效地址</strong>。</p><p>有效地址（Effective Address，EA） = 位移量（disp） + 基址（base） + 变址（index）</p><p>位移量：存放在指令中的数，但它不是一个立即数，而是一个地址，可以用变量或标号标识<br>基址：存放在基址寄存器（BX，BP）中，有效地址的基址部分<br>变址：存放在变址寄存器（SI，DI）中，有效地址的变址部分</p><h4 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h4><h4 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h4><h4 id="寄存器相对寻址"><a href="#寄存器相对寻址" class="headerlink" title="寄存器相对寻址"></a>寄存器相对寻址</h4><h4 id="基址变址寻址"><a href="#基址变址寻址" class="headerlink" title="基址变址寻址"></a>基址变址寻址</h4><h4 id="相对基址变址寻址"><a href="#相对基址变址寻址" class="headerlink" title="相对基址变址寻址"></a>相对基址变址寻址</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要描述了何为寻址，寻址能力的计算以及 8086 处理器的寻址方式有哪些。&lt;/p&gt;
&lt;h2 id=&quot;寻址&quot;&gt;&lt;a href=&quot;#寻址&quot; 
      
    
    </summary>
    
    
      <category term="1-网络笔记" scheme="https://wiki.blanc.site/categories/1-%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="汇编语言" scheme="https://wiki.blanc.site/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>x86汇编指令</title>
    <link href="https://wiki.blanc.site/archives/f3934733.html"/>
    <id>https://wiki.blanc.site/archives/f3934733.html</id>
    <published>2021-02-05T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>注：本文以 <code>x86</code> 指令集架构为例</strong></p><h2 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h2><h2 id="算数运算指令"><a href="#算数运算指令" class="headerlink" title="算数运算指令"></a>算数运算指令</h2><h2 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h2><h2 id="串指令"><a href="#串指令" class="headerlink" title="串指令"></a>串指令</h2><h2 id="程序转移指令"><a href="#程序转移指令" class="headerlink" title="程序转移指令"></a>程序转移指令</h2><p>可以修改 IP 或同时修改 CS 和 IP 寄存器内容的指令统称为转移指令。可以通俗理解为：转移指令就是可以控制 CPU 下一步执行内存中哪一处指令的指令。</p><p>在 8086 中按照转移行为可分为：</p><ol><li>段内转移：只修改 IP<ol><li>短转移：IP 修改范围为 -128~127(2^7-1)</li><li>近转移：IP 修改范围为 -32768~32767(2^15-1)</li></ol></li><li>段间转移（远转移）：同时修改 CS 和 IP</li></ol><p>按照功能不同，转移指令又可细分为一下几种：</p><h3 id="无条件转移指令"><a href="#无条件转移指令" class="headerlink" title="无条件转移指令"></a>无条件转移指令</h3><p>描述：无条件转移指令可以控制 CPU 下一步执行代码段（CS）中任意内存地址对应的指令</p><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>操作符，由编译器处理，功能是获取标号的偏移地址</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start: mov ax,offset start ; 相当于 mov ax,0</span><br><span class="line">next: mov ax,offset next ; 相当于 mov ax,3 | 第一条指令长度为三个字节，因此 next 的偏移地址为 3</span><br></pre></td></tr></table></figure><h4 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h4><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><p>转移地址可以在指令、内存或寄存器中指出。可以只修改 IP，也可以同时修改 CS 和 IP</p><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><p>使用 jmp 指令时需要提供两种信息：</p><ol><li>转移的目的地址</li><li>转移类型（段间转移（远转移）、段内短转移、段内近转移）</li></ol><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><ol><li>转移目的地址在指令中</li></ol><p>语法：<code>jmp short 标号</code><br>作用：转移到标号处执行指令<br>描述：这种格式的 jmp 指令实现的是段内短转移，short 为短转移标志<br>原理：ip = ip + 8 位位移 | 8 位位移 = 标号地址 - jmp 指令后第一个字节的地址<br>此指令形式是针对当前指令所在位置（即当前 IP）进行跳转的，且 8 位位移范围是 -128~127，由编译程序在编译时计算<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start:</span><br><span class="line">    mov ax,0</span><br><span class="line">    jmp short next</span><br><span class="line">    add ax,1</span><br><span class="line">next:</span><br><span class="line">    inc ax</span><br><span class="line">; 最终结果 ax 内的值为 1</span><br></pre></td></tr></table></figure><p>语法：<code>jmp near ptr 标号</code><br>作用：转移到标号处执行指令<br>描述：这种格式的 jmp 指令实现的是段内近转移，near 为近转移标志<br>原理：ip = ip + 16 位位移 | 16 位位移 = 标号地址 - jmp 指令后的第一个字节地址<br>此指令也是针对当前指令所在位置（即当前 IP）进行跳转的，且 16 位位移范围是 -32768~32767，由编译程序在编译时计算</p><p>语法：<code>jmp far ptr 标号</code><br>作用：转移到标号处执行命令<br>描述：这种格式的 jmp 指令实现的是段间转移（即远转移），far ptr 为远转移标志<br>原理：cs = 标号所在段的段地址 | ip = 标号所在段中的偏移 | 高位存储段地址，低位存储偏移地址</p><ol start="2"><li>转移目的地址在内存中</li></ol><p>语法：<code>jmp word ptr 内存单元地址</code><br>作用：转移到目标内存地址所存储的地址处执行指令<br>描述：这种格式的 jmp 指令实现的是段内转移，word ptr 是转移标志<br>原理：ip = 内存地址所存储的内容</p><p>语法：<code>jmp dword ptr 内存单元地址</code><br>作用：在内存单元地址处存放两个字，高地址存放转移的目的段地址，低地址存放转移的目的偏移地址<br>描述：这种格式的 jmp 指令实现的是段间转移（即远转移），dword ptr 为远转移标志<br>原理：cs = 内存单元地址 + 2 所存储的内容 | ip = 内存单元地址存储的内容<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0123H</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">mov word ptr ds:[2],0</span><br><span class="line">jmp dword ptr ds:[0]</span><br><span class="line">; 执行后 cs &#x3D; 0 | ip &#x3D; 0123H</span><br></pre></td></tr></table></figure><ol><li>转移目的地址在寄存器中</li></ol><p>语法：<code>jmp 16位寄存器</code><br>作用：转移到目标寄存器所存储的地址处执行指令<br>描述：这种格式的 jmp 指令实现的是段内转移<br>原理：ip = 16位寄存器内容</p><p>语法：<code>jmp 段地址:偏移地址</code><br>作用：转移到目标地址处执行命令<br>描述：这种格式的 jmp 执行实现的是段间转移<br>原理：cs = 段地址 | ip = 偏移地址</p><h3 id="条件转移指令"><a href="#条件转移指令" class="headerlink" title="条件转移指令"></a>条件转移指令</h3><h3 id="循环控制指令"><a href="#循环控制指令" class="headerlink" title="循环控制指令"></a>循环控制指令</h3><h3 id="终端指令"><a href="#终端指令" class="headerlink" title="终端指令"></a>终端指令</h3><h3 id="处理器控制指令"><a href="#处理器控制指令" class="headerlink" title="处理器控制指令"></a>处理器控制指令</h3><h2 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h2><h2 id="处理器控制指令-1"><a href="#处理器控制指令-1" class="headerlink" title="处理器控制指令"></a>处理器控制指令</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://innofang.github.io/2017/11/26/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/" target="_blank" rel="external nofollow noopener noreferrer">Inno’s Blog：汇编语言学习笔记（九）：转移指令的原理</a></li><li><a href="https://www.cnblogs.com/mfm11111/archive/2009/03/27/1422828.html" target="_blank" rel="external nofollow noopener noreferrer">jasonM：一步步学习汇编(10)之jmp指令原理分析（破解软件的必修课）</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注：本文以 &lt;code&gt;x86&lt;/code&gt; 指令集架构为例&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据传送指令&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="1-理论计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="4-编程语言和编译器" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/4-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
      <category term="汇编语言" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/4-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="汇编指令" scheme="https://wiki.blanc.site/tags/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>计算机的启动</title>
    <link href="https://wiki.blanc.site/archives/37910dd2.html"/>
    <id>https://wiki.blanc.site/archives/37910dd2.html</id>
    <published>2021-02-02T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文并非从本质上去讲解计算机的启动过程，而是站在汇编程序执行的角度去理解计算机在启动过程中是如何执行最底层的汇编程序的，并进一步了解这些汇编程序是从哪里来的。</p><p><strong>注：本文内容以 <code>x86</code> 体系计算机为例</strong></p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ol><li>CPU：负责读取和执行被加载（或映射）到内存中的指令或数据；</li><li>ROM：只读存储器，存储在一个非易失芯片上，即在关机后内容仍然可以被保存。主要用来存储计算机启动的引导系统 BIOS(Basic Input/Output System)；</li><li>内存：存储（或映射）正在执行的程序所编译好的指令或数据；</li><li>硬盘：存储数据或程序可执行文件；</li><li>其他硬件：显示器、显卡、键盘等等。</li></ol><h2 id="提前了解"><a href="#提前了解" class="headerlink" title="提前了解"></a>提前了解</h2><p>想要完整的理解计算机启动过程需要有一定的前置知识积累，这里简单的罗列和解释了一些前置知识点。<strong>选择自己不熟悉的内容查看即可。</strong></p><h3 id="CPU-工作模式"><a href="#CPU-工作模式" class="headerlink" title="CPU 工作模式"></a>CPU 工作模式</h3><p>CPU 在上电之后会反复重复两个动作：</p><ol><li>从内存读取指令；</li><li>执行刚刚读取的指令。</li></ol><p><strong>注：当然具体工作原理要比这个复杂的多，这里仅是解释一下 CPU 简单的工作模式</strong></p><h3 id="ROM-中的-BIOS"><a href="#ROM-中的-BIOS" class="headerlink" title="ROM 中的 BIOS"></a>ROM 中的 BIOS</h3><p>只读存储器（Read Only Memory，ROM）：是一种半导体存储器，其特性是一旦存储资料就无法再将之改变或删除，且内容不会因为电源关闭而消失。正是由于这种特性 ROM 被用在在计算机中存储启动引导程序。</p><p>基本输入输出系统（Basic Input/Output System，BIOS），也成为 ROM BIOS、System BIOS、PC BIOS，是在计算机通电引导阶段运行硬件初始化以及为操作系统提供运行时服务的固件。BIOS 预安装在计算机的主板上是计算机启动时加载的第一个软件。</p><p><strong>注：这边讲的都是一个大概，并非具体细节，如果想了解具体细节的话可以自己搜索资料深入了解。</strong></p><h3 id="寻址空间、寻址、物理地址、逻辑地址"><a href="#寻址空间、寻址、物理地址、逻辑地址" class="headerlink" title="寻址空间、寻址、物理地址、逻辑地址"></a>寻址空间、寻址、物理地址、逻辑地址</h3><h4 id="寻址空间（最大内存容量）"><a href="#寻址空间（最大内存容量）" class="headerlink" title="寻址空间（最大内存容量）"></a>寻址空间（最大内存容量）</h4><p>寻址空间一般指的是 CPU 对于内存的寻址能力，通俗来说就是 CPU 可支持的最大内存容量，以字节为单位。寻址空间的大小由地址总线的地址寄存器宽度（位数）决定，假设地址总线位数为 N 位，则寻址空间为 2 的 N 次方字节（因为计算机使用的是二进制所以是 2 的 N 次方）。</p><blockquote><p>小知识<br>目前（2015年5月），Intel 的 32位架构下，可使用的地址线是 36个，可使用的最大物理地址是 2^36B，折合 64GB，可用的地址空间是 4GB。<br>64位架构下，地址线是 46个，所以最大的物理地址是 2^46B，折合 64TB，可用地址空间也是这么大（目前为止）</p><p><a href="https://baike.baidu.com/item/%E5%9C%B0%E5%9D%80%E6%80%BB%E7%BA%BF" target="_blank" rel="external nofollow noopener noreferrer">知乎：北极就「32位系统只能寻址4G空间，64位则是128G，这些是怎么算出来的？」这一问题的回答节选</a></p></blockquote><h4 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h4><p>内存中每一个字节都有一个对应的内存地址，CPU 去访问某一具体内存地址的过程称为寻址。</p><h4 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h4><p>CPU 地址总线传来的地址，大部分是留给内存对应了内存的内存地址，但也常被映射到其他存储器上（如显存、BIOS 等）。</p><h4 id="逻辑地址"><a href="#逻辑地址" class="headerlink" title="逻辑地址"></a>逻辑地址</h4><p>为了方便编程，进一步的将内存划分成不同的段，在这种模式下内存地址的表达形式为：<code>段地址：偏移地址</code>，逻辑地址仅在汇编编程的过程中使用，在汇编程序经过编译之后逻辑地址会转化成物理地址。</p><p>所以，无论是物理地址还是逻辑地址都是指的内存地址，只是两种不同的表达方式，逻辑地址的出现也只是为了方便编程。</p><h3 id="I-O、MMIO"><a href="#I-O、MMIO" class="headerlink" title="I/O、MMIO"></a>I/O、MMIO</h3><h4 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h4><p>I/O 为 Input &amp; Output 的简写，这里指的是 I/O 设备。</p><p>所谓 I/O 设备指的是计算机的输入和输出设备，常见的有：<br>输出设备：显示器、打印机；<br>输入设备：键盘、鼠标。</p><p>而控制这些 I/O 设备的原理其实就是控制设备内部寄存器的读写，这些 I/O 设备的寄存器被称为 I/O 端口，通常包括：控制寄存器、状态寄存器和数据寄存器三大类。</p><h4 id="MMIO"><a href="#MMIO" class="headerlink" title="MMIO"></a>MMIO</h4><p>内存映射 I/O（Memory mapping I/O，MMIO），通过将 I/O 端口映射到内存空间便于 CPU 访，在映射之后就可以实现 CPU 通过操控内存间接控制 I/O 设备，这样访问 AGP/PCI-E 显卡上的帧缓存、BIOS、PCI 设备等就可以使用读写内存一样的汇编指令完成，简化了程序设计的难度和接口的复杂性。</p><h2 id="从按下开关键那一刻开始"><a href="#从按下开关键那一刻开始" class="headerlink" title="从按下开关键那一刻开始"></a>从按下开关键那一刻开始</h2><h3 id="上电"><a href="#上电" class="headerlink" title="上电"></a>上电</h3><p>在按下开机键之后，电源开始向计算机主板和其他设备供电，在芯片组检测到电源稳定供电后（一瞬间的事情）CPU 开始工作（即读取和执行指令）。</p><h3 id="读取-BIOS"><a href="#读取-BIOS" class="headerlink" title="读取 BIOS"></a>读取 BIOS</h3><p><strong>注：这里涉及到一些汇编基础，我就不过多解释了</strong></p><p>在刚开机初始阶段计算机内存中是没有任何内容的，此时 CPU 通过读取 CS 和 IP 寄存器的内容来获取自己需要执行的指令，而此时寄存器 CS 存储内容为 0xFFFF，寄存器 IP 存储内容为 0x0000，即计算机会从 0xFFFF:0x0000（实际对应地址为：0xFFFF0）开始读取并执行指令。0xFFFF0 正是 ROM 中 BIOS 经过 MMIO 后所对应的内存地址。</p><p>即计算机在开机初始阶段会先读取 BIOS 中内置的程序指令，而 BIOS 内置程序指令主要完成了以下工作：</p><ol><li>硬件自检（Power-On Self-Test， POST）：查看计算机硬件能否满足运行的基本条件</li><li>启动顺序（Boot Sequence）：程序读取启动顺序表，按照内容依次尝试并在成功后停止继续尝试</li></ol><h3 id="主引导扇区"><a href="#主引导扇区" class="headerlink" title="主引导扇区"></a>主引导扇区</h3><p>主引导扇区（Main Boot Sector，MBR）：硬盘的第 0 扇面、第 0 磁道、第 1 扇区。</p><p>这里我们假设我们设置的启动顺序第一位是硬盘并且硬盘实际存在，BIOS 程序会硬盘的主引导扇区读入物理地址为 0x07C00 起始的内存区域并继续执行其中内容。</p><p>为什么是 0x07C00？貌似是历史原因，没什么特别之处，可以自己去百度了解一下。</p><p>主引导扇区共 512字节，只有在这 512字节的最后两个字节为 0x55 和 0xAA 时才能被用于计算机启动，如果不是就表明此硬盘不可用于计算机启动，BIOS 则会继续读取启动顺序中记录的下一个设备。</p><p>正常情况下这 512字节的主要作用为：</p><ol><li>1-446字节：调用操作系统的机器码</li><li>447-510字节：分区表（Partition table）</li><li>511-512字节：主引导扇区签名（0x55AA）</li></ol><h4 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h4><p>分区表的长度为 64字节，具体分为四项，每项 16字节。所以，一个硬盘最多可分为四个一级分区，又叫做「主分区」，每个主分区的 16字节由 6 部分组成：</p><ol><li>第 1字节：如果是 0x80，标识主分区是激活分区，控制权要转交给这个分区（四个主分区里只能有一个是激活的）；</li><li>第 2-4 字节：主分区第一个扇区的物理位置（柱面，磁头、扇区号等）；</li><li>第 5字节：主分区类型；</li><li>第 6-8字节：主分区最后一个扇区的物理位置；</li><li>第 9-12字节：主分区的第一个扇区的物理位置；</li><li>第 13-16字节：主分区的扇区总数。</li></ol><p>分出主分区后其余部分可以分成拓展分区，一般是剩下的部分全部分成拓展分区，也可以不全分，但剩下的部分就浪费了。拓展分区不能直接使用，必须分成若干逻辑分区，所有逻辑分区都是拓展分区的一部分。</p><p>磁盘的容量 = 主分区容量 + 拓展分区容量 + 空闲分区容量<br>拓展分区容量 = 各个逻辑分区容量之和 + 空闲分区容量</p><h3 id="硬盘启动"><a href="#硬盘启动" class="headerlink" title="硬盘启动"></a>硬盘启动</h3><h4 id="卷引导记录"><a href="#卷引导记录" class="headerlink" title="卷引导记录"></a>卷引导记录</h4><p>如果操作系统安装在激活的主分区中，计算机会读取激活分区的第一个扇区，叫做「卷引导记录（Volume Boot Record，VBR）」。</p><p>卷引导记录负责告诉计算机操作系统在这个分区的具体位置，然后计算机就会加载操作系统完成开机行为。</p><h4 id="拓展分区和逻辑分区"><a href="#拓展分区和逻辑分区" class="headerlink" title="拓展分区和逻辑分区"></a>拓展分区和逻辑分区</h4><p>我们一般不将操作系统安装在拓展分区或逻辑分区中，如果有这种情况一般也采用下面一种启动方式。</p><h4 id="启动管理器"><a href="#启动管理器" class="headerlink" title="启动管理器"></a>启动管理器</h4><p>在这种情况下，计算机读取主引导扇区的前 446字节后不再将控制权转交给某一个分区，而是运行事先安装好的启动管理器（Boor Loader），由用户选择具体启动哪一个操作系统。</p><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>进行完前面的流程后，进入操作系统启动流程，本文对这一部分不作出详细介绍，如果感兴趣的话可以自己百度搜索。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://baike.baidu.com/item/%E5%AF%BB%E5%9D%80%E7%A9%BA%E9%97%B4" target="_blank" rel="external nofollow noopener noreferrer">百度百科：寻址空间</a></li><li><a href="https://www.zhihu.com/question/29962475/answer/47109811" target="_blank" rel="external nofollow noopener noreferrer">知乎：北极回答</a></li><li><a href="https://baike.baidu.com/item/%E5%9C%B0%E5%9D%80%E6%80%BB%E7%BA%BF" target="_blank" rel="external nofollow noopener noreferrer">百度百科：地址总线</a></li><li><a href="https://blog.csdn.net/gatieme/article/details/50646461" target="_blank" rel="external nofollow noopener noreferrer">CSDN-JeanChen：深入理解计算机系统……</a></li><li><a href="https://blog.csdn.net/prike/article/details/52722934" target="_blank" rel="external nofollow noopener noreferrer">CSDN-颇锐克：逻辑地址、线性地址和物理地址的关系</a></li><li><a href="https://blog.csdn.net/langb2014/article/details/79372384" target="_blank" rel="external nofollow noopener noreferrer">CSDN-langb2014：IO端口和IO内存的区别及分别使用的函数接口</a></li><li><a href="http://mcu.eetrend.com/content/2018/100012210.html" target="_blank" rel="external nofollow noopener noreferrer">MCU 中文技术社区-judy：详解io端口与io内存</a></li><li><a href="https://zhuanlan.zhihu.com/p/37715216" target="_blank" rel="external nofollow noopener noreferrer">知乎-围城：内存映射IO (MMIO) 简介</a></li><li><a href="https://zhidao.baidu.com/question/2272528432818700268.html" target="_blank" rel="external nofollow noopener noreferrer">百度知道-笑脸蓝雨：电脑的开机原理是什么？</a></li><li><a href="https://www.cnblogs.com/ronny/p/7787259.html" target="_blank" rel="external nofollow noopener noreferrer">思维之际：计算机加电后操作系统启动过程</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="external nofollow noopener noreferrer">阮一峰的网络日志：计算机是如何启动的？</a></li><li><a href="https://www.cnblogs.com/adamwong/p/10582183.html#_caption_2" target="_blank" rel="external nofollow noopener noreferrer">Adam’s blog：计算机启动过程</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文并非从本质上去讲解计算机的启动过程，而是站在汇编程序执行的角度去理解计算机在启动过程中是如何执行最底层的汇编程序的，并进一步了解这些汇编
      
    
    </summary>
    
    
      <category term="1-网络笔记" scheme="https://wiki.blanc.site/categories/1-%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="汇编语言" scheme="https://wiki.blanc.site/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>对比 C 和 CPP 中 struct class 和 union</title>
    <link href="https://wiki.blanc.site/archives/ca916e4c.html"/>
    <id>https://wiki.blanc.site/archives/ca916e4c.html</id>
    <published>2020-11-11T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-struct-与-CPP-struct-对比"><a href="#C-struct-与-CPP-struct-对比" class="headerlink" title="C struct 与 CPP struct 对比"></a>C struct 与 CPP struct 对比</h2><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;a;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> <span class="title">test</span>;</span></span><br><span class="line">a test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> <span class="title">test3</span>;</span></span><br></pre></td></tr></table></figure><h4 id="CPP"><a href="#CPP" class="headerlink" title="CPP"></a>CPP</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;a;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> <span class="title">test</span>;</span></span><br><span class="line">a test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> <span class="title">test3</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方式</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span>&#123;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">C test4;</span><br></pre></td></tr></table></figure><h3 id="结构体内容"><a href="#结构体内容" class="headerlink" title="结构体内容"></a>结构体内容</h3><p>CPP 中 struct 可以有成员函数（构造函数、析构函数、常规函数和虚函数）和静态成员（静态成员函数和静态成员变量）。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>CPP 中 struct 可以继承 class 和 struct，也可以被 class 和 struct 继承；</p><p>CPP 中 struct 内可以使用 public proctected private 访问属性，默认为 public，C 中 struct 访问属性默认为 public 且不可修改；</p><p>C 中 sizeof 空结构体结果为 1；<br>CPP 中 sizeof 空结构体结果为 0。</p><h2 id="CPP-中-struct-与-class-对比"><a href="#CPP-中-struct-与-class-对比" class="headerlink" title="CPP 中 struct 与 class 对比"></a>CPP 中 struct 与 class 对比</h2><ol><li>struct 默认访问属性是 public，class 则是 private；</li><li>struct 继承 struct 和 class 后默认访问属性是 public；</li><li>class 继承 struct 和 class 后默认访问属性时 private；</li><li>struct 如果没有定义构造函数或虚函数则可以使用 <code>{}</code> 进行初始化：struct 使用 <code>{}</code> 进行初始化时按照数据在内存中顺序从其实地址依次初始化的，在 struct 定义虚函数后 struct 其实地址首先是虚指针，在 struct 定义构造函数后则使用构造函数进行初始化；</li><li>class 可用于定义模板参数，struct 不行。</li></ol><h2 id="CPP-中-union-特性"><a href="#CPP-中-union-特性" class="headerlink" title="CPP 中 union 特性"></a>CPP 中 union 特性</h2><ol><li>默认访问属性为 public；</li><li>不能继承也不能被继承；</li><li>所有元素（成员变量）共用一块内存，并且内存大小是成员变量中类型最大的值。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>union 主要用来节省内存空间；<br>struct 主要用来对某种结构进行封装；<br>class 主要用来对某类对象进行封装；</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/106676923" target="_blank" rel="external nofollow noopener noreferrer">知乎-LWenlong：C++ union、struct 和 class</a></li><li><a href="https://fuhailin.github.io/C-CPP-Structer/" target="_blank" rel="external nofollow noopener noreferrer">赵大寳：C/C++中结构体的定义以及实例化</a></li><li><a href="https://www.topomel.com/archives/1297.html" target="_blank" rel="external nofollow noopener noreferrer">拓扑梅尔-BlogUpdater：深度理解：struct和class的区别</a></li><li><a href="https://blog.csdn.net/iflysoft/article/details/9232885" target="_blank" rel="external nofollow noopener noreferrer">CSDN-长空飞鸟：Thinking in C++: C++中关于union、struct、class的区别</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C-struct-与-CPP-struct-对比&quot;&gt;&lt;a href=&quot;#C-struct-与-CPP-struct-对比&quot; class=&quot;headerlink&quot; title=&quot;C struct 与 CPP struct 对比&quot;&gt;&lt;/a&gt;C struct 与 CPP
      
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="1-理论计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="4-编程语言和编译器" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/4-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
      <category term="C&amp;CPP" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/4-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8/C-CPP/"/>
    
    
      <category term="CPP" scheme="https://wiki.blanc.site/tags/CPP/"/>
    
  </entry>
  
  <entry>
    <title>数据结构笔记2-线性表</title>
    <link href="https://wiki.blanc.site/archives/e3cbe031.html"/>
    <id>https://wiki.blanc.site/archives/e3cbe031.html</id>
    <published>2020-11-06T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.163Z</updated>
    
    <content type="html"><![CDATA[<p>注：本人学习数据结构时是以 C++ 为编程语言</p><h2 id="概念-名词解释"><a href="#概念-名词解释" class="headerlink" title="概念-名词解释"></a>概念-名词解释</h2><p>线性表：线性存储结构，将具有「一对一」关系的数据「线性」地存储到物理空间中，这种存储结构就称为线性存储结构（简称：线性表）。</p><p>依据在计算机中的实际存储结构线性存储结构可以细分为一下两种：</p><ol><li>顺序表：将线性表中所有元素按照其逻辑顺序依次存储到从计算机存储中指定存储位置开始的一块连续的存储空间中；</li></ol><p><img src="https://img.blanc.site//wiki/img/20201106214753.png" alt="顺序表"></p><ol><li>链表：线性表的元素存储在不连续的物理空间中，用指针表示结点间的逻辑关系。</li></ol><p><img src="https://img.blanc.site//wiki/img/20201106214802.png" alt="单链表"></p><p>表名、表项、表头、表尾、头结点、首元结点、直接前驱、直接后继、空表、有序表、无序表：会在后面的代码示例中解释</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="实现分析"><a href="#实现分析" class="headerlink" title="实现分析"></a>实现分析</h3><h4 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h4><p>在 C 语言中，顺序表有两种实现方式：</p><details>  <summary>点击显示/隐藏全部代码</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态存储结构</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  T data[maxSize];</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">&#125; SeqList;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 动态存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  T *data;</span><br><span class="line">  <span class="keyword">int</span> maxSize, len;</span><br><span class="line">&#125; SeqList;</span><br></pre></td></tr></table></figure></details><p>在我所用的教科书里选用了在 C++ 中延续动态存储结构，这里我就顺着教科书走，后面的代码实现也是使用 C++ 配合动态存储结构实现顺序表。</p><h4 id="常见属性列举"><a href="#常见属性列举" class="headerlink" title="常见属性列举"></a>常见属性列举</h4><ol><li>用来存放数据的数组变量；</li><li>用来存放表容量的整型变量；</li><li>用来存放当前表已占用容量的整型变量；</li></ol><h4 id="常见方法列举"><a href="#常见方法列举" class="headerlink" title="常见方法列举"></a>常见方法列举</h4><ol><li>通过传入容量变量构造实例的构造函数；</li><li>复制构造函数；</li><li>析构函数；</li><li>返回表容量的函数；</li><li>返回表当前已占用容量的函数；</li><li>头插 | 尾插 | 任意位置插入；</li><li>搜索 X 在表中的位置；</li><li>获取第 i 项 | 修改第 i 项 | 删除第 i 项</li><li>判空 | 判满</li><li>格式化输出</li><li>动态改变表容量的方法；</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><details>  <summary>点击显示/隐藏全部代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ryoma on 2020/11/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SeqList</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  SeqList(<span class="keyword">int</span> capacity = <span class="number">10</span>);                 <span class="comment">// 构造函数</span></span><br><span class="line">  SeqList(SeqList&lt;T&gt; &amp;TheSqlList);            <span class="comment">// 复制构造函数</span></span><br><span class="line">  ~SeqList() &#123; <span class="keyword">delete</span>[] data_; &#125;              <span class="comment">// 析构函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">HeadInsert</span><span class="params">(T &amp;element)</span></span>;                <span class="comment">// 头插</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">LastInsert</span><span class="params">(T &amp;element)</span></span>;                <span class="comment">// 尾插</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> index, T &amp;element)</span></span>;         <span class="comment">// 任意位置插入</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Search</span><span class="params">(T &amp;element)</span></span>;                     <span class="comment">// 搜索 x 在表中的位置</span></span><br><span class="line">  <span class="function">T <span class="title">GetData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;                       <span class="comment">// 获取第 i 项的值</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetData</span><span class="params">(<span class="keyword">int</span> index, T &amp;element)</span></span>;        <span class="comment">// 将第 i 项更新为 x</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">DeleteData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;                 <span class="comment">// 删除第 i 项</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">IsFull</span><span class="params">()</span></span>;                              <span class="comment">// 判满</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span>;                             <span class="comment">// 判空</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FormatOutput</span><span class="params">()</span></span>;                        <span class="comment">// 格式化输出</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> capacity_; &#125;  <span class="comment">// 获取表容量</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> size_; &#125;          <span class="comment">// 获取表当前占用容量</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  T *data_;                                   <span class="comment">// 表成员数组指针</span></span><br><span class="line">  <span class="keyword">int</span> size_;                                  <span class="comment">// 表当前占用容量</span></span><br><span class="line">  <span class="keyword">int</span> capacity_;                              <span class="comment">// 表容量</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">ResetCapacity</span><span class="params">(<span class="keyword">int</span> new_capacity)</span></span>;       <span class="comment">// 重置表容量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">SeqList</span>&lt;T&gt;:</span>:SeqList(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">  <span class="keyword">if</span> (capacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    capacity_ = capacity;</span><br><span class="line">    size_ = <span class="number">0</span>;</span><br><span class="line">    data_ = <span class="keyword">new</span> T[capacity_];</span><br><span class="line">    <span class="keyword">if</span> (data_ == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">cerr</span> &lt;&lt; <span class="string">"memory allocation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"sequential list capacity set error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">SeqList</span>&lt;T&gt;:</span>:SeqList(SeqList&lt;T&gt; &amp;TheSqlList) &#123;</span><br><span class="line">  capacity_ = TheSqlList.capacity();</span><br><span class="line">  size_ = TheSqlList.<span class="built_in">size</span>();</span><br><span class="line">  T value;</span><br><span class="line">  data_ = <span class="keyword">new</span> T[capacity_];</span><br><span class="line">  <span class="keyword">if</span> (data_ == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"memory allocation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size_; i++) &#123;</span><br><span class="line">    TheSqlList.GetData(i);</span><br><span class="line">    data_[i] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:ResetCapacity(<span class="keyword">int</span> new_capacity) &#123;</span><br><span class="line">  <span class="comment">// 判断给出顺序表容量是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (new_capacity &lt;= capacity_) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"sequential list capacity set error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建扩容后的数组用来存放顺序表元素</span></span><br><span class="line">  T *new_array = <span class="keyword">new</span> T[new_capacity];</span><br><span class="line">  <span class="keyword">if</span> (new_array == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"memory allocation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将旧顺序表数组的内容同步到新顺序表中</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size_; ++i) &#123;</span><br><span class="line">    new_array[i] = data_[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 替换属性</span></span><br><span class="line">  <span class="keyword">delete</span>[] data_;</span><br><span class="line">  data_ = new_array;</span><br><span class="line">  capacity_ = new_capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:HeadInsert(T &amp;element) &#123;</span><br><span class="line">  <span class="comment">// 判满 | 如果顺序表满则扩容</span></span><br><span class="line">  <span class="keyword">if</span> (size_ == capacity_) &#123;</span><br><span class="line">    ResetCapacity(<span class="number">2</span> * capacity_);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将顺序表内所有元素向后移动一位</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = size_; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">    data_[i] = data_[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  data_[<span class="number">0</span>] = element;</span><br><span class="line">  size_++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:LastInsert(T &amp;element) &#123;</span><br><span class="line">  <span class="comment">// 判满 | 如果顺序表满则扩容</span></span><br><span class="line">  <span class="keyword">if</span> (size_ == capacity_) &#123;</span><br><span class="line">    ResetCapacity(<span class="number">2</span> * capacity_);</span><br><span class="line">  &#125;</span><br><span class="line">  data_[size_] = element;</span><br><span class="line">  size_++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将给出的元素值插入到当前顺序表的第 index 个元素前</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:Insert(<span class="keyword">int</span> index, T &amp;element) &#123;</span><br><span class="line">  <span class="comment">// 判断 index 是否正确</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt; size_ || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"index input error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判满 | 如果顺序表满则扩容</span></span><br><span class="line">  <span class="keyword">if</span> (size_ == capacity_) &#123;</span><br><span class="line">    ResetCapacity(<span class="number">2</span> * capacity_);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将顺序表 index 之后的全部元素向后平移一位</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = size_; i &gt; index; --i) &#123;</span><br><span class="line">    data_[i] = data_[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  data_[index - <span class="number">1</span>] = element;</span><br><span class="line">  size_++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从当前顺序表搜索给出的元素值</span></span><br><span class="line"><span class="comment">// 如果元素值存在，返回元素值第一次出现在当前顺序表的第几个元素</span></span><br><span class="line"><span class="comment">// 如果不存在返回 0</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:Search(T &amp;element) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size_; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data_[i] == element) &#123;</span><br><span class="line">      <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前顺序表的第 index 个元素</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:GetData(<span class="keyword">int</span> index) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt; size_ || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"index input error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data_[index - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前顺序表的第 index 个元素修改为给出的元素值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:SetData(<span class="keyword">int</span> index, T &amp;element) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt; size_ || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"index input error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  data_[index - <span class="number">1</span>] = element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:DeleteData(<span class="keyword">int</span> index) &#123;</span><br><span class="line">  <span class="keyword">if</span> (size_ == <span class="number">0</span> || index &gt; size_ || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"index input error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = index - <span class="number">1</span>; i &lt; size_; ++i) &#123;</span><br><span class="line">    data_[i] = data_[i + <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  size_--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:FormatOutput() &#123;</span><br><span class="line">  <span class="keyword">if</span> (size_ == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size_; ++i) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; data_[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:IsFull() &#123;</span><br><span class="line">  <span class="keyword">return</span> size_ == capacity_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">SeqList</span>&lt;T&gt;:</span>:IsEmpty() &#123;</span><br><span class="line">  <span class="keyword">return</span> size_ == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeadInsert</span><span class="params">(T &amp;element)</span></span>;                <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LastInsert</span><span class="params">(T &amp;element)</span></span>;                <span class="comment">// O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> index, T &amp;element)</span></span>;         <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search</span><span class="params">(T &amp;element)</span></span>;                     <span class="comment">// O(n)</span></span><br><span class="line"><span class="function">T <span class="title">GetData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;                       <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetData</span><span class="params">(<span class="keyword">int</span> index, T &amp;element)</span></span>;        <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;                 <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatOutput</span><span class="params">()</span></span>;                        <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ResetCapacity</span><span class="params">(<span class="keyword">int</span> new_capacity)</span></span>;       <span class="comment">// O(n)</span></span><br></pre></td></tr></table></figure><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h3 id="实现分析-1"><a href="#实现分析-1" class="headerlink" title="实现分析"></a>实现分析</h3><p>根据链表的组成，通常会使用结点类和链表类协同表示链表。</p><p>一个链表包含零个或多个结点，因此一个类型为 List 的对象包括零个或多个类型为 LinkNode 的对象。这种关系在面向对象方法中叫做「聚合关系」，或者叫做「整体-部分关系」。</p><p>为了简化问题，设一个单链表的每一个结点中的数据元素为一个整型数据，有4 种方法设计数据结构。</p><h4 id="实现方案-1"><a href="#实现方案-1" class="headerlink" title="实现方案"></a>实现方案</h4><details><summary>方案一：复合类</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span>;</span>         <span class="comment">// List 类的前视声明</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkNode</span> &#123;</span>    <span class="comment">// 结点类定义</span></span><br><span class="line"> <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span>;</span> <span class="comment">// 声明 List 类为友元类</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">int</span> data;         <span class="comment">// 数据元素域</span></span><br><span class="line">  LinkNode *link;   <span class="comment">// 链指针域</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span>        <span class="comment">// List 类定义</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 链表操作</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  LinkNode *first; <span class="comment">// 链表头指针 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details><summary>方案二：嵌套类</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 链表操作</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    LinkNode *link;</span><br><span class="line">  &#125;;</span><br><span class="line">  LinkNode *first;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details><summary>方案三：基类和派生类</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">int</span> data;</span><br><span class="line">  LinkNode *link;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span>:</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  LinkNode *first;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//链表操作</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>方案四：用 struct 定义 LinkNode 类</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> data;</span><br><span class="line">  LinkNode *link;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  LinkNode *first;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 链表操作</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><p>后面我将采用「方案四：用 struct 定义 LinkNode 类」来实现链表以及其一些列变种。</p><h4 id="常见属性列举-1"><a href="#常见属性列举-1" class="headerlink" title="常见属性列举"></a>常见属性列举</h4><ol><li>结点类中存放数据的变量；</li><li>结点类中存放此结点所指向的下一结点的指针变量；</li><li>带头指针的链表类所包含的指向头结点的指针变量；</li></ol><h4 id="常见方法列举-1"><a href="#常见方法列举-1" class="headerlink" title="常见方法列举"></a>常见方法列举</h4><ol><li>构造函数</li><li>复制构造函数</li><li>析构函数</li><li>置空函数</li><li>返回链表当前大小的函数</li><li>头插 | 尾插 | 任意位置插入</li><li>搜索 X 在表中的位置</li><li>获取第 i 项 | 修改第 i 项 | 删除第 i 项</li><li>判空</li><li>格式化输出</li></ol><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><details><summary>点击展示/隐藏全部代码</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ryoma on 2020/11/11.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  T data;         <span class="comment">// 数据域</span></span><br><span class="line">  Node&lt;T&gt; *next;  <span class="comment">// 指针域</span></span><br><span class="line"></span><br><span class="line">  Node(Node&lt;T&gt; *ptr = <span class="literal">NULL</span>) &#123;</span><br><span class="line">    next = ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  Node(<span class="keyword">const</span> T &amp;element, Node&lt;T&gt; *ptr = <span class="literal">NULL</span>) &#123;</span><br><span class="line">    data = element;</span><br><span class="line">    next = ptr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SingleLinkedList</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  SingleLinkedList();                                           <span class="comment">// 构造函数</span></span><br><span class="line">  SingleLinkedList(SingleLinkedList&lt;T&gt; &amp;theSingleLinkedList);   <span class="comment">// 复制构造函数</span></span><br><span class="line">  ~SingleLinkedList();                                          <span class="comment">// 析构函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">()</span></span>;                                             <span class="comment">// 置空函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">HeadInsert</span><span class="params">(T &amp;element)</span></span>;                                  <span class="comment">// 头插</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">LastInsert</span><span class="params">(T &amp;element)</span></span>;                                  <span class="comment">// 尾插</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> index, T &amp;element)</span></span>;                           <span class="comment">// 在第 index 项之后插入</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Search</span><span class="params">(T &amp;element)</span></span>;                                       <span class="comment">// 搜索 element 在链表中的位置，找到返回位置，找不到返回 0</span></span><br><span class="line">  <span class="function">T <span class="title">GetData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;                                         <span class="comment">// 获取链表中第 index 项的值</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetData</span><span class="params">(<span class="keyword">int</span> index, T &amp;element)</span></span>;                          <span class="comment">// 将链表中第 index 项的值更改为 element</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">DeleteData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;                                   <span class="comment">// 删除链表的第 index 项</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span>;                                               <span class="comment">// 判空</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FormatOutput</span><span class="params">()</span></span>;                                          <span class="comment">// 格式化输出链表元素</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> length_; &#125;                        <span class="comment">// 返回链表长度</span></span><br><span class="line">  <span class="function">Node&lt;T&gt; *<span class="title">first</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> first_; &#125;                     <span class="comment">// 返回头指针</span></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">int</span> length_;                                                  <span class="comment">// 链表长度</span></span><br><span class="line">  Node&lt;T&gt; *first_;                                              <span class="comment">// 链表头指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:SingleLinkedList() &#123;</span><br><span class="line">  length_ = <span class="number">0</span>;</span><br><span class="line">  first_ = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:SingleLinkedList(SingleLinkedList&lt;T&gt; &amp;theSingleLinkedList) &#123;</span><br><span class="line">  T value;</span><br><span class="line">  Node&lt;T&gt; *old_first = theSingleLinkedList.first();</span><br><span class="line">  Node&lt;T&gt; *new_first = first_ = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_first == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"memory allocation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将原实例中所有结点复制到新实例中</span></span><br><span class="line">  <span class="keyword">while</span>(old_first-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    value = old_first-&gt;next-&gt;data;</span><br><span class="line">    new_first-&gt;next = <span class="keyword">new</span> Node&lt;T&gt;(value);</span><br><span class="line">    new_first = new_first-&gt;next;</span><br><span class="line">    old_first = old_first-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  new_first-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:~SingleLinkedList&lt;T&gt;() &#123;</span><br><span class="line">  MakeEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:MakeEmpty() &#123;</span><br><span class="line">  Node&lt;T&gt; *temp_node;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历整个单链表，逐个删除结点</span></span><br><span class="line">  <span class="keyword">while</span>(first_-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    temp_node = first_-&gt;next;</span><br><span class="line">    first_-&gt;next = temp_node-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> temp_node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  first_-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">  length_ = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:HeadInsert(T &amp;element) &#123;</span><br><span class="line">  <span class="keyword">if</span> (length_ == <span class="number">0</span>) &#123;</span><br><span class="line">    first_-&gt;data = element;</span><br><span class="line">    length_++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node&lt;T&gt; *new_node = <span class="keyword">new</span> Node&lt;T&gt;(element, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"memory allocation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node&lt;T&gt; *old_head = first_;</span><br><span class="line">  first_ = new_node;</span><br><span class="line">  first_-&gt;next = old_head;</span><br><span class="line">  length_++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:LastInsert(T &amp;element) &#123;</span><br><span class="line">  <span class="keyword">if</span> (length_ == <span class="number">0</span>) &#123;</span><br><span class="line">    first_-&gt;data = element;</span><br><span class="line">    length_++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node&lt;T&gt; *new_node = <span class="keyword">new</span> Node&lt;T&gt;(element, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"memory allocation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node&lt;T&gt; *current = first_;</span><br><span class="line">  <span class="keyword">while</span>(current-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    current = current-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  current-&gt;next = new_node;</span><br><span class="line">  length_++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:Insert(<span class="keyword">int</span> index, T &amp;element) &#123;</span><br><span class="line">  <span class="keyword">if</span> (length_ == <span class="number">0</span> &amp;&amp; index == <span class="number">1</span>) &#123;</span><br><span class="line">    first_-&gt;data = element;</span><br><span class="line">    length_++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断 index 输入正确性</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt; length_ || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"index input error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node&lt;T&gt; *new_node = <span class="keyword">new</span> Node&lt;T&gt;(element, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"memory allocation failed!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node&lt;T&gt; *current = first_;</span><br><span class="line">  <span class="keyword">int</span> current_index = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (current-&gt;next != <span class="literal">NULL</span> &amp;&amp; current_index &lt; index) &#123;</span><br><span class="line">    current = current-&gt;next;</span><br><span class="line">    current_index++;</span><br><span class="line">  &#125;</span><br><span class="line">  Node&lt;T&gt; *next_node = current-&gt;next;</span><br><span class="line">  current-&gt;next = new_node;</span><br><span class="line">  new_node-&gt;next = next_node;</span><br><span class="line"></span><br><span class="line">  length_++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:Search(T &amp;element) &#123;</span><br><span class="line">  Node&lt;T&gt; *current = first_;</span><br><span class="line">  <span class="keyword">int</span> current_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current-&gt;data == element) &#123;</span><br><span class="line">      <span class="keyword">return</span> current_index;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current-&gt;next;</span><br><span class="line">    current_index++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:GetData(<span class="keyword">int</span> index) &#123;</span><br><span class="line">  <span class="comment">// 判断 index 输入正确性</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt; length_ || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"index input error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node&lt;T&gt; *current = first_;</span><br><span class="line">  <span class="keyword">int</span> current_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current_index == index) &#123;</span><br><span class="line">      <span class="keyword">return</span> current-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current-&gt;next;</span><br><span class="line">    current_index++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:SetData(<span class="keyword">int</span> index, T &amp;element) &#123;</span><br><span class="line">  <span class="comment">// 判断 index 输入正确性</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt; length_ || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"index input error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node&lt;T&gt; *current = first_;</span><br><span class="line">  <span class="keyword">int</span> current_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current_index == index) &#123;</span><br><span class="line">      current-&gt;data = element;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current-&gt;next;</span><br><span class="line">    current_index++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:DeleteData(<span class="keyword">int</span> index) &#123;</span><br><span class="line">  <span class="comment">// 判断 index 输入正确性</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt; length_ || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"index input error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">    Node&lt;T&gt; *old_head = first_;</span><br><span class="line">    first_ = first_-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> old_head;</span><br><span class="line">    length_--;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node&lt;T&gt; *current = first_;</span><br><span class="line">  <span class="keyword">int</span> current_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current_index == index - <span class="number">1</span>) &#123;</span><br><span class="line">      Node&lt;T&gt; *node_to_be_deleted = current-&gt;next;</span><br><span class="line">      current-&gt;next = node_to_be_deleted-&gt;next;</span><br><span class="line">      node_to_be_deleted-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">delete</span> node_to_be_deleted;</span><br><span class="line">      length_--;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current-&gt;next;</span><br><span class="line">    current_index++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:IsEmpty() &#123;</span><br><span class="line">  <span class="keyword">return</span> length_ == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 代办 针对复杂的 T 应该给 Node 单独定义 FormatOutput 函数并在输出结点内容时调用</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">SingleLinkedList</span>&lt;T&gt;:</span>:FormatOutput() &#123;</span><br><span class="line">  <span class="keyword">if</span> (length_ == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node&lt;T&gt; *current = first_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; current-&gt;data &lt;&lt; <span class="string">"-&gt;"</span>;</span><br><span class="line">    current = current-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; current-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="效率分析-1"><a href="#效率分析-1" class="headerlink" title="效率分析"></a>效率分析</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeadInsert</span><span class="params">(T &amp;element)</span></span>;                <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LastInsert</span><span class="params">(T &amp;element)</span></span>;                <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> index, T &amp;element)</span></span>;         <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search</span><span class="params">(T &amp;element)</span></span>;                     <span class="comment">// O(n)</span></span><br><span class="line"><span class="function">T <span class="title">GetData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;                       <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetData</span><span class="params">(<span class="keyword">int</span> index, T &amp;element)</span></span>;        <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;                 <span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatOutput</span><span class="params">()</span></span>;                        <span class="comment">// O(n)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注：本人学习数据结构时是以 C++ 为编程语言&lt;/p&gt;
&lt;h2 id=&quot;概念-名词解释&quot;&gt;&lt;a href=&quot;#概念-名词解释&quot; class=&quot;headerlink&quot; title=&quot;概念-名词解释&quot;&gt;&lt;/a&gt;概念-名词解释&lt;/h2&gt;&lt;p&gt;线性表：线性存储结构，将具有「一对一」
      
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="1-理论计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="1-数据结构和算法" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://wiki.blanc.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>zsh 历史文件损坏</title>
    <link href="https://wiki.blanc.site/archives/2025325c.html"/>
    <id>https://wiki.blanc.site/archives/2025325c.html</id>
    <published>2020-10-17T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.163Z</updated>
    
    <content type="html"><![CDATA[<p>系统因为某些原因强行重启的时候有很大可能损坏 zsh 的历史记录文件，导致下次使用时提示：<code>zsh: corrupt history file /path/to/.zsh_history</code> </p><p>理论上来说直接删除 <code>.zsh_history</code> 是可以消除报错的，但会导致之前的命令历史被删除，正确的解决方法是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp .zsh_history zsh_history// 复制损坏的历史记录文件</span><br><span class="line">rm .zsh_history// 删除原来的历史记录</span><br><span class="line">strings zsh_history &gt; .zsh_history// 通过 strings 命令修复此文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统因为某些原因强行重启的时候有很大可能损坏 zsh 的历史记录文件，导致下次使用时提示：&lt;code&gt;zsh: corrupt history file /path/to/.zsh_history&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;理论上来说直接删除 &lt;code&gt;.zsh_hi
      
    
    </summary>
    
    
      <category term="2-软件使用" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="zsh" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/zsh/"/>
    
    
      <category term="zsh" scheme="https://wiki.blanc.site/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>cpp 中的声明和定义</title>
    <link href="https://wiki.blanc.site/archives/154e48dc.html"/>
    <id>https://wiki.blanc.site/archives/154e48dc.html</id>
    <published>2020-10-13T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区分声明和定义"><a href="#区分声明和定义" class="headerlink" title="区分声明和定义"></a>区分声明和定义</h2><p>C++ 程序由各种实体（例如变量、函数、类型和命名空间）组成。<strong>必须先声明其中的每个实体才能使用这些实体。</strong></p><p>除了声明以外，还必须定义一些实体，包括函数、类、枚举和常量变量。定义为编译器提供了在程序中使用该实体时生成计算机代码所需要的所有信息。无论定义的是函数还是变量，编译器都要为他们在定义点分配存储空间。</p><p>基本类型变量的声明和定义（初始化）时同时产生的，而对于对象或其他复杂类型变量来说声明和定义时分开的。</p><p>简而言之：定义动作会分配存储空间，而声明动作则不会。</p><h2 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h2><p>局部变量被定义时，系统不会对其初始化，必须手动初始化；定义全局变量时系统会自动进行如下初始化。</p><table><thead><tr><th>数据类型</th><th>初始化默认值</th></tr></thead><tbody><tr><td>int</td><td><code>0</code></td></tr><tr><td>char</td><td><code>&#39;\0&#39;</code></td></tr><tr><td>float</td><td><code>0</code></td></tr><tr><td>double</td><td><code>0</code></td></tr><tr><td>pointer</td><td><code>NULL</code></td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.microsoft.com/zh-cn/cpp/cpp/declarations-and-definitions-cpp?view=vs-2019" target="_blank" rel="external nofollow noopener noreferrer">声明和定义（c + +）</a></li><li><a href="https://blog.csdn.net/feitianxuxue/article/details/7204116" target="_blank" rel="external nofollow noopener noreferrer">CSDN-飞天絮血：变量定义和声明的区别（整理）</a></li><li><a href="https://www.runoob.com/cplusplus/cpp-variable-scope.html" target="_blank" rel="external nofollow noopener noreferrer">菜鸟教程-C++</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;区分声明和定义&quot;&gt;&lt;a href=&quot;#区分声明和定义&quot; class=&quot;headerlink&quot; title=&quot;区分声明和定义&quot;&gt;&lt;/a&gt;区分声明和定义&lt;/h2&gt;&lt;p&gt;C++ 程序由各种实体（例如变量、函数、类型和命名空间）组成。&lt;strong&gt;必须先声明其中的每个实
      
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="1-理论计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="4-编程语言和编译器" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/4-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
      <category term="C&amp;CPP" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/4-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8/C-CPP/"/>
    
    
      <category term="CPP" scheme="https://wiki.blanc.site/tags/CPP/"/>
    
  </entry>
  
  <entry>
    <title>数据结构笔记1-概论</title>
    <link href="https://wiki.blanc.site/archives/f3c5e08e.html"/>
    <id>https://wiki.blanc.site/archives/f3c5e08e.html</id>
    <published>2020-10-08T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>数据是信息的载体，是<strong>描述客观事物的</strong>数、字符以及所有能输入到计算机中并被计算机程序识别和处理的符合的集合。</p><p>数据大致可分为两类，一类是<strong>数值性数据</strong>，包括整数、浮点数、复数、双精度数等，主要用于工程和科学计算，以及商业事务处理；另一类是<strong>非数值性数据</strong>，主要包括字符和字符串，以及文字、图形、图像、语音等数据。</p><h3 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h3><p>数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可以有若干个数据项组成，数据项是数据元素的不可分割的最小单位。例如：学生记录作为一个数据元素，它由学号、姓名、性别等数据项组成。</p><h3 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h3><p>数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型是一个值的集合和定义在此集合上一组操作的总称。</p><ol><li>原子类型：其值不可在分割的数据类型；</li><li>结构类型：其值可以在分割成若干成分的数据类型；</li><li>抽象数据类型：抽象数据组织和与之相关的操作。</li></ol><h3 id="抽象数据类型（ADT-Abstract-Data-Type）"><a href="#抽象数据类型（ADT-Abstract-Data-Type）" class="headerlink" title="抽象数据类型（ADT: Abstract Data Type）"></a>抽象数据类型（ADT: Abstract Data Type）</h3><p>一个数学模型以及定义在该模型上的一组操作。</p><p>抽象数据类型的定义仅取决于它的一组逻辑特性，而与其在计算机内部如何表示和实现无关，即不论其内部结构如何变化，只要它的数学特性不变，都不影响其外部的使用。通常用数据对象（D)、 数据关系（S)、基本操作集（P)这样的三元组来表示抽象数据类型。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>数据结构包括三方面的内容：逻辑结构、存储结构和数据的运算。数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所釆用的存储结构。</p><p>数据结构是由某一数据元素的集合和该集合中数据元素之间的关系组成的。</p><p><code>Data_Structure = {D, R}</code></p><p>D 是某一数据元素的集合，R 是该集合中所有数据元素之间的关系的有限集合。</p><p>有关数据结构的讨论主要涉及<strong>数据元素之间的关系，不涉及数据元素本身的内容</strong>。</p><h3 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h3><p>数据的逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据，与数据的存储无关。</p><h4 id="逻辑结构的第一种分类方式"><a href="#逻辑结构的第一种分类方式" class="headerlink" title="逻辑结构的第一种分类方式"></a>逻辑结构的第一种分类方式</h4><p>依据元素之间关系的不同，数据的逻辑结构分为两大类：线性结构和非线性结构。</p><p><img src="https://img.blanc.site//wiki/img/20201019000530.png" alt="逻辑结构分类-1"></p><h4 id="逻辑结构的第二种分类方式"><a href="#逻辑结构的第二种分类方式" class="headerlink" title="逻辑结构的第二种分类方式"></a>逻辑结构的第二种分类方式</h4><p>线性结构：数据元素之间存在一对一的关系<br>树形结构：数据元素之间存在一对多的关系<br>图形结构：数据元素之间存在多对多的关系<br>集合结构：数据元素属于同一个集合</p><p><img src="https://img.blanc.site//wiki/img/20201106203719.jpg" alt="逻辑结构分类-2"></p><h3 id="数据的存储结构"><a href="#数据的存储结构" class="headerlink" title="数据的存储结构"></a>数据的存储结构</h3><p>数据的存储结构是指数据结构在计算机中的具体表示（又称映像），也成物理结构。包括数据元素的表示和数据元素间关系的表示。数据的存储结构是数据的逻辑结构用计算机语言实现的。它依赖于计算机语言。主要有如下四种结构：</p><ol><li>顺序存储结构：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元里，元素之间的关系由存储单元的邻接关系来体现。其优点是可以实现随机存取，每个元素占用最少的存储空间；缺点是只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。</li><li>链式存储结构：不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指针表示元素之间的逻辑关系。其优点是不会出现碎片现象，充分利用所有存储单元；缺点是每个元素因存储指针而占用额外的存储空间，并且只能实现顺序存取。</li><li>索引存储结构：在存储元素信息的同时，还建立附加的索引表。索引表中的每一项称为索引项，索引项的一般形式是：（关键字，地址）。其优点是检索速度快；缺点是增加了附加的索引表，会占用较多的存储空间。另外，在增加和删除数据时要修改索引表，因而会花费较多的时间。</li><li>散列存储结构：根据元素的关键字直接计算出该元素的存储地址，又称为Hash存储。其优点是检索、增加和删除结点的操作都很快；缺点是如果散列函数不好可能出现元素存储单元的冲突，而解决冲突会增加时间和空间开销。</li></ol><h3 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h3><p>施加再数据上的运算包括运算的定义和实现。运算的定义时针对逻辑结构的，之处运算的功能；运算的实现是针对存储结构的，之处运算的具体操作步骤。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="算法的基本概念"><a href="#算法的基本概念" class="headerlink" title="算法的基本概念"></a>算法的基本概念</h3><p>算法（algorithm）是对特定问题求解步骤的一种描述，它是指令的有限序列，其中每一条指令表示一个或多个操作。</p><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><ol><li>有穷性：总是（对任何合法的输入值）在执行又穷步之后结束，且每一步都可在有穷时间内完成</li><li>确定性：每一条指令必须有确切的含义，读者理解时不会产生二义性。即对于相同的输入只能得出相同的输出（幂等性？）</li><li>可行性：算法中描述的操作都是已经实现的基本操作执行有限次来实现的</li><li>输入：有零个或多个输入</li><li>输出：有一个或多个输出</li></ol><h3 id="算法的性能标准"><a href="#算法的性能标准" class="headerlink" title="算法的性能标准"></a>算法的性能标准</h3><ol><li>正确性：正确的执行预定的功能和性能要求</li><li>可读性</li><li>健壮性：输入非法数据时也能适当的做出反应进行处理。</li><li>效率和低存储量需求</li></ol><h3 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h3><p>算法效率的度量可分为事前估计和后期测试。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>一个语句的频度是指该语句在算法中被重复执行的次数。算法中所有语句的频度之和记作 <code>T(n)</code>，它是该算法问题规模 <code>n</code> 的函数，时间复杂度主要分析 <code>T(n)</code> 的数量级。算法中的基本运算（最深层循环内的语句）的频度与 <code>T(n)</code> 同数量级，所以通常釆用算法中基本运算的频度  <code>f(n)</code> 来分析算法的时间复杂度。因此，算法的时间复杂度也记为：<br><code>T(n)=O(f(n))</code></p><p>上式中 <code>O</code> 的含义是 <code>T(n)</code> 的数量级，其严格的数学定义是：若 <code>T(n)</code> 和 <code>f(n)</code> 是定义在正整数集合上的两个函数，则存在正常数 <code>C</code> 和 <code>n_0</code>，使得当 <code>n &gt;= n_0</code> 时，都满足 <code>0 &lt;= T(n) &lt;= C * f(n)</code>。</p><p>注意：取 <code>f(n)</code> 中随 <code>n</code> 增长最快的项将其系数置为 1 作为时间复杂度的度量。例如，<code>fi(n) = a * n^3 + b * n^2 + c * n</code>，则其时间复杂度为 <code>O(n^3)</code>。</p><p>算法的时间复杂度不仅依赖于问题的规模 <code>n</code>，也取决于待输入数据的性质（如输入数据元素的初始状态）。</p><p>一般总是考虑在最坏情况下的时间复杂度，以保证算法的运行时间不会比它更长。</p><p>在分析一个程序的时间复杂性时，有以下两条规则：</p><ol><li>加法规则：<code>T(n) = T1(n) + T2(n) = O(f(n)) + O(g(n)) = O(max(f(n), g(n)))</code></li><li>乘法规则：<code>T(n) = T1(n) * T2(n) = O(f(n)) * O(g(n)) = O( f(n) * g(n) )</code></li></ol><p>常见的渐近时间复杂度有：<code>O(1)&lt;O(log2n)&lt;O(n)&lt;O(nlog2n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</code></p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>算法的空间复杂度 <code>S(n)</code>，定义为该算法所耗费的存储空间，它是问题规模 <code>n</code> 的函数。渐近空间复杂度也常简称为空间复杂度，记作 <code>S(n)=O(g(n))</code>。</p><p>一个上机程序除了需要存储空间来存放本身所用指令、常数、变量和输入数据外，也需要一些对数据进行操作的工作单元和存储一些为实现计算所需信息的辅助空间，若输入数据所占空间只取决于问题本身，和算法无关，则只需分析除输入和程序之外的额外空间。</p><p>算法原地工作是指算法所需辅助空间是常量，即 <code>O(1)</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://c.biancheng.net/cpp/shujujiegou/" target="_blank" rel="external nofollow noopener noreferrer">数据结构C语言版：经典数据结构与算法分析教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/146430058" target="_blank" rel="external nofollow noopener noreferrer">知乎-码匠：数据结构与算法是什么？</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;数据&quot;&gt;&lt;a href=&quot;#数据&quot; class=&quot;headerlink&quot; title=&quot;数据&quot;&gt;&lt;/a&gt;数据&lt;/h
      
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="1-理论计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="1-数据结构和算法" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://wiki.blanc.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Django 中有趣又有用的代码设计</title>
    <link href="https://wiki.blanc.site/archives/5d9ebead.html"/>
    <id>https://wiki.blanc.site/archives/5d9ebead.html</id>
    <published>2020-08-30T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用代码片段"><a href="#通用代码片段" class="headerlink" title="通用代码片段"></a>通用代码片段</h2><h3 id="初始化类时通过-setattr-和-kwargs-自动设置实例属性"><a href="#初始化类时通过-setattr-和-kwargs-自动设置实例属性" class="headerlink" title="初始化类时通过 setattr 和 **kwargs 自动设置实例属性"></a>初始化类时通过 setattr 和 **kwargs 自动设置实例属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django.views.generic.base.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">setattr(self, key, value)</span><br></pre></td></tr></table></figure><h3 id="通过字典进行-Model-objects-get-Model-objects-filter"><a href="#通过字典进行-Model-objects-get-Model-objects-filter" class="headerlink" title="通过字典进行 Model.objects.get | Model.objects.filter"></a>通过字典进行 Model.objects.get | Model.objects.filter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rest_framework.generics.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(views.APIView)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self)</span>:</span></span><br><span class="line">queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">lookup_url_kwarg = self.lookup_url_kwarg <span class="keyword">or</span> self.lookup_field</span><br><span class="line"><span class="comment"># 通过 url 传参动态获取对象</span></span><br><span class="line">filter_kwargs = &#123;self.lookup_field: self.kwargs[lookup_url_kwarg]&#125;</span><br><span class="line">obj = get_object_or_404(queryset, **filter_kwargs)</span><br><span class="line"></span><br><span class="line">self .check_object_permissions(self.request, obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通用代码片段&quot;&gt;&lt;a href=&quot;#通用代码片段&quot; class=&quot;headerlink&quot; title=&quot;通用代码片段&quot;&gt;&lt;/a&gt;通用代码片段&lt;/h2&gt;&lt;h3 id=&quot;初始化类时通过-setattr-和-kwargs-自动设置实例属性&quot;&gt;&lt;a href=&quot;#初始化类
      
    
    </summary>
    
    
      <category term="2-软件使用" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Django" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/Django/"/>
    
    
      <category term="Django" scheme="https://wiki.blanc.site/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>MySQL8 Grant check the manual that corresponds to your MySQL server version for the right syntax to use.m</title>
    <link href="https://wiki.blanc.site/archives/16f6299.html"/>
    <id>https://wiki.blanc.site/archives/16f6299.html</id>
    <published>2020-08-26T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="错误重现："><a href="#错误重现：" class="headerlink" title="错误重现："></a>错误重现：</h2><p><code>OS</code>: <code>Windows 10</code><br><code>MySQL version</code>: <code>8.0.21</code></p><p>PS：我已经将 <code>MySQL</code> 的加密规则修改为 <code>mysql_native_password</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;testpassword&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;IDENTIFIED BY &#39;testpassword&#39; at line 1</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>最开始判断为加密规则的问题后续检查后发现之前已经就该过加密规则了，因此排除这一错误原因。谷歌搜索后找到了 <a href="https://ma.ttias.be/mysql-8-removes-shorthand-creating-user-permissions/" target="_blank" rel="external nofollow noopener noreferrer">一篇文章</a> 给出了解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;root&#39;@&#39;%&#39; identified by &#39;testpassword&#39;;</span><br><span class="line"></span><br><span class="line">grant all on *.* to &#39;root&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure><p>根据文章给出的解释：似乎是 <code>MySQL</code> 放弃了对这个简写版的支持，现在需要一个稍长一点的版本来代替。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://ma.ttias.be/mysql-8-removes-shorthand-creating-user-permissions/" target="_blank" rel="external nofollow noopener noreferrer">@mattiasgeniar-MySQL 8 removes shorthand for creating user + permissions</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;错误重现：&quot;&gt;&lt;a href=&quot;#错误重现：&quot; class=&quot;headerlink&quot; title=&quot;错误重现：&quot;&gt;&lt;/a&gt;错误重现：&lt;/h2&gt;&lt;p&gt;&lt;code&gt;OS&lt;/code&gt;: &lt;code&gt;Windows 10&lt;/code&gt;&lt;br&gt;&lt;code&gt;MySQL ve
      
    
    </summary>
    
    
      <category term="1-网络笔记" scheme="https://wiki.blanc.site/categories/1-%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="异常处理" scheme="https://wiki.blanc.site/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
      <category term="MySQL" scheme="https://wiki.blanc.site/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Django admin 笔记</title>
    <link href="https://wiki.blanc.site/archives/8bf18292.html"/>
    <id>https://wiki.blanc.site/archives/8bf18292.html</id>
    <published>2020-08-11T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记"><a href="#记" class="headerlink" title="记"></a>记</h2><p>一下内容是我阅读 Django 官方文档 admin 相关内容时随手翻译的，内容未经整理</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>admin 的 requirements：</p><ol><li>添加 <code>dango.contrib.admin</code> 和它依赖的 <code>django.contrib.auth</code> <code>django.contrib.contenttypes</code> <code>django.contrib.messages</code> <code>django.contrib.sessions</code> 到 <code>INSTALLED_APPS</code></li><li>通过在项目设置项 <code>TEMPLATES</code> 的选项 <code>OPTIONS</code> 的选项 <code>context_processors</code> 下添加  <code>django.contrib.auth.context_processors.auth</code> 和 <code>django.contrib.messages.contxet_processors.messages</code> 来配置  <code>DjangoTemplates</code></li><li>如果是自定义的 MIDDLEWARE 设置项， <code>django.contrib.auth.middleware.AuthenticationMiddleware</code> 和 <code>django.contrib.messages.middleware.MessageMiddleware</code> 必须被包括在其中</li><li>配置 admin URL 到项目 URLconf</li></ol><p>在进行这些配置后可以通过访问绑定的 url 访问 admin（默认是 <code>/admin/</code>）</p><p>可以使用默认的 <code>createsuperuser</code> 命令来创建一个用来登录的用户。一般来说用户需要将 <code>is_superuser</code> 和 <code>is_staff</code> 属性都设置为 True 才能登录 admin。</p><p>最后，确定应用程序的哪些模型可以在展示在 admin 中。按照 <code>ModelAdmin</code> 中的描述，在管理员处注册它们。</p><h2 id="ModelAdmin"><a href="#ModelAdmin" class="headerlink" title="ModelAdmin"></a>ModelAdmin</h2><p><code>ModelAdmin</code> 类是 model 在 admin 接口中的表达方式。通常这些内容会存储在应用下的 <code>admin.py</code> 文件下。</p><h3 id="Discovery（发现）-of-admin-files"><a href="#Discovery（发现）-of-admin-files" class="headerlink" title="Discovery（发现） of admin files"></a>Discovery（发现） of admin files</h3><p>当把 <code>django.contrib.admin</code> 加入到 <code>INSTALLED_APPS</code>，Django 会在 app 目录中自动查找 admin 模块并引用它</p><ul><li><p>class apps.AdminConfig<br>这是 admin 的默认的 AppConfig 类。它会在 Django 启动时调用 autodiscover() 方法</p></li><li><p>class apps.SimpleAdminConfig<br>和上面的类似，但是不调用 autodiscover</p></li><li><p>default_site<br>一个点状的导入路径，用于导入默认的管理站点的类或返回站点实例的可调用类</p></li></ul><p>默认为’django.contrib.admin.sites.AdminSite’</p><ul><li>autodiscove()</li></ul><p>该功能试图<strong>在每个安装的应用程序中导入一个 admin 模块</strong>，这样的模块被期望向 admin 注册模型。</p><p>通常情况下，你不需要直接调用这个函数，因为当Django启动时，AdminConfig会调用它。</p><p>如果你使用的是自定义的 AdminSite，通常会将所有的 ModelAdmin 子类导入到你的代码中，并将它们注册到自定义的AdminSite中。</p><p>在这种情况下，为了禁用自动发现，</p><p>你应该在INSTALLED_APPS设置中加入’django.contrib.admin.apps.SimpleAdminConfig’而不是’django.contrib.admin’。</p><h3 id="ModelAdmin-options"><a href="#ModelAdmin-options" class="headerlink" title="ModelAdmin options"></a>ModelAdmin options</h3><p>ModelAdmin 非常灵活。它有几个选项来处理自定义界面。所有选项都定义在 ModelAdmin 子类上。</p><ul><li><p>ModelAdmin.action | 展示页<br>在 change list page 提供的操作列表</p></li><li><p>ModelAdmin.actions_on_top | 展示页</p></li><li><p>ModelAdmin.actions_on_botton | 展示页<br>控制动作栏在哪个位置出现，默认 top</p></li><li><p>ModelAdmin.actions_selection_counter | 展示页<br>是否在 action dropdwon 下显示计数器（默认显示）</p></li><li><p>ModelAdmin.date_hierarchy | 展示页<br>将此选项设置为 Modle 中某一个 DateField 或 DateTimeFile 字段，在 List 页面的顶部会显示一个时间选择条</p></li><li><p>ModelAdmin.emty_value_display | 展示页<br>当某个值为空的时候填充什么</p></li><li><p>ModelAdmin.exclued | 详情页（新增，更改）<br>给定一个字段名称的列表或元组，将其中的字段从详情页中排除</p></li><li><p>ModelAdmin.fields | 详情页（新增，更改）<br>fields 能够接受与 list_display 同类型的值，只是不能接受可调用项</p></li></ul><p>model 和 model admin methods 只能在 readonly_fields 字段上可用</p><p>如果要将多项内容放在一行，需要将所需选项放入一个元组中（不知道列表行不行）</p><p>如果 fields 和 fieldsets 选项都不存在，Django 将默认在单个 fieldset 中显示每一个不是 AutoField 且 editable = True 的字段，顺序与在 model 中顺序相同</p><ul><li>ModelAdmin.fieldsets | 详情页（新增，更改）<br>field set =》 字段 集合，管理字段集合的一个选项</li></ul><p>一个二元元组的元组（列表应该也行吧），其中每个二元元祖代表页面上的一组字段</p><p>二元元祖格式：(name, field_options)<br>name 表示字段集标题的字符串<br>field_options 关于字符集信息的字典，包括要在其中显示的字段列表</p><p>field_options 字段可配置的键：<br>    * fields：字段名称的元组，与 fields 参数相同，必须<br>        * classes 一个包含额外应用到此 fieldset 上的 CSS 类的元组或列表，有两个默认的选项 coolapse 和 wide<br>        * description：描述内容，现实在字段集合顶部标题下，可以直接写HTML</p><ul><li>ModelAdmin.filter_horizontal | 新增或更改页面<br>为 ManyToManyFields 添加选择框</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># person admin.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@register(Person)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">filter_horizontal = (<span class="string">"task"</span>,)</span><br></pre></td></tr></table></figure><p>TODO 插入图片</p><ul><li>ModelAdmin.filter_vertical | 展示页</li></ul><p>和 filter_horizontal 类似，只是 从横向变成纵向</p><ul><li>ModelAdmin.form | 新增或修改页面<br>默认情况下会为 Model 动态创建一个 ModelForm。用于创建在新增或修改页面展示。</li></ul><p>可以通过这个属性提供一个自己的表单来覆盖表单行为，或者可以使用自定义默认表单而不是自动生成（请看 Adding custom validation to the admin）</p><p>如果 ModelForm 和 ModelAdmin 都定义了 excude ModelAdmin 优先</p><ul><li><p>ModelAdmin.formfield_overrides | 每太看懂不过感觉用不上<br>This provides a quick-and-dirty way to override some of the Field options for use in the admin</p></li><li><p>ModelAdmin.inlines<br>略</p></li><li><p>ModelAdmin.list_display | 展示页<br>一个字段名元组（列表也行），选择需要在 List 页面展示哪些字段</p></li></ul><p>可以自定义一些 callable 对象然后赋值给它用来展示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper_case_name</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">"%s %s"</span> % (obj.first_name, obj.last_name)).upper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过这个属性来设置展示名称</span></span><br><span class="line">upper_case_name.short_description = <span class="string">'Name'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (upper_case_name,)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'upper_case_name'</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upper_case_name</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"%s %s"</span> % (obj.first_name, obj.last_name)).upper()</span><br><span class="line">    upper_case_name.short_description = <span class="string">'Name'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    birthday = models.DateField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decade_born_in</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.birthday.strftime(<span class="string">'%Y'</span>)[:<span class="number">3</span>] + <span class="string">"0's"</span></span><br><span class="line">    decade_born_in.short_description = <span class="string">'Birth decade'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'name'</span>, <span class="string">'decade_born_in'</span>)</span><br></pre></td></tr></table></figure><p>关于 list_dispaly 的一些特殊情况：</p><ol><li>如果字段是 ForeignKey，Django 会显示该字段的 <strong>str</strong></li><li>ManyToManyField 不能被写在这里面，因为这需要对表中的每一个执行一个单独的 SQL 语句。如果你确实想这么做，可以提供一个 model 自定义方法，并且将这个方法名写在 list_display 中</li><li>如果是布尔值，Django将显示一个 on 或 off 的图标</li><li>如果是给定 model ModelAdmin 或callable，Django会对输出进行 HTML转义</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils.html <span class="keyword">import</span> format_html</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    color_code = models.CharField(max_length=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">colored_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> format_html(</span><br><span class="line">            <span class="string">'&lt;span style="color: #&#123;&#125;;"&gt;&#123;&#125; &#123;&#125;&lt;/span&gt;'</span>,</span><br><span class="line">            self.color_code,</span><br><span class="line">            self.first_name,</span><br><span class="line">            self.last_name,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'first_name'</span>, <span class="string">'last_name'</span>, <span class="string">'colored_name'</span>)</span><br></pre></td></tr></table></figure><p>通常，list_display 中不是实际数据库字段的元素不能用于排序，但如果 list_display 的元素表示某个数据库字段，则可以通过设置项的 admin_order_field 属性来表明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils.html <span class="keyword">import</span> format_html</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    color_code = models.CharField(max_length=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">colored_first_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> format_html(</span><br><span class="line">            <span class="string">'&lt;span style="color: #&#123;&#125;;"&gt;&#123;&#125;&lt;/span&gt;'</span>,</span><br><span class="line">            self.color_code,</span><br><span class="line">            self.first_name,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    colored_first_name.admin_order_field = <span class="string">'first_name'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'first_name'</span>, <span class="string">'colored_first_name'</span>)</span><br></pre></td></tr></table></figure><p>list_display 中的字段名将作为 css class 出现在 HTML 中</p><p>Django 将按照以下顺序 interpret 每一个 list_display 上的元素：</p><ol><li>model 的字段</li><li>callable</li><li>ModelAdmin 属性字符串</li><li>model 属性字符串</li></ol><ul><li>ModelAdmin.list_display_links | 展示页<br>规定 list_display 中哪个字段链接到对应对象的更改页面，默认是列表的第一列</li></ul><p>可以设置多个，但必须在 list_display 中，也可以置空</p><ul><li>ModelAdmin.list_editable | 展示页</li></ul><p>元组（列表），必须包含在 list_display 中不能喝 list_display_links 重合</p><p>允许在展示页直接对某些元素进行修改</p><ul><li>ModelAdmin.list_filter | 展示页<br>元组（列表），必须包含在 list_display 中</li></ul><p>在展示页右侧新增一个通过规定内容进行过滤的过滤器</p><p>允许是以下类型之一：</p><ol><li>字段名，可以通过双下划线进行跨关系查找</li><li>继承自 django.contrib.admin.SimplateFilter 的类，需要提供 title 和 parameter_name 属性重写 lookups 和 queryset 方法</li><li>元组，第一个元素是字段名，第二个是 django.contrib.admin.SimplateFilter 类的子类</li></ol><ul><li>ModelAdmin.list_max_show_all | 展示页</li></ul><p>管理 show all admin change list page 可以显示多少项，默认200<br>只有当总数少于设置项时才会显示 show all 按钮</p><ul><li>ModelAdmin.list_per_page | 展示页</li></ul><p>展示页每页显示数目，默认100</p><ul><li>ModelAdmin.list_select_related | 展示页？</li></ul><blockquote><p>select_related主要针一对一和多对一关系进行优化。<br>select_related使用SQL的JOIN语句进行优化，通过减少SQL查询的次数来进行优化、提高性能。</p></blockquote><p>设置 list_select_related 告诉 Django 使用 select_related() 在更改页面检索对象列表时</p><p>布尔值，列表或元组，默认为 False<br>当时 True 时，始终调用 select_related；False时，查看 list_display 在存在 ForeignKey 时调用 select_related</p><p>使用元组（或列表）进行更细粒度的控制，空元组会阻止 Django 使用 select_related，任何其他的元组都会直接传递给 select_related 作为参数</p><p>如果需要根据请求指定一个动态值，可以实现一个get_list_select_related（）方法。</p><ul><li>ModelAdmin.ordering | 展示页</li></ul><p>设置排序，列表或元组<br>如果需要指定动态顺序（例如根据用户或语言），可以实现get_ordering（）方法。</p><ul><li>ModelAdmin.paginator | 展示页</li></ul><p>规定要用于分页的 paginator 类 默认 <code>django.core.paginator.Paginator</code></p><p>自定义分页类需要继承 <code>django.core.paginator.Paginator</code> 而却需要提供 <code>ModelAdmin.get_paginator()</code></p><ul><li>ModelAdmin.prepopulated_fielads</li></ul><p>将预填充字段设置为字典，将字段名称映射到应预填充的字段</p><ul><li>ModelAdmin.preserve_filters | 展示页面</li></ul><p>站点会在创建、编辑或删除对象后在列表视图中保留过滤器。</p><ul><li>ModelAdmin.radio_fields | 创建或修改</li></ul><p>默认情况下，Django的管理员对 ForeignKey 或设置了选项的字段使用选择框界面（<select>）。如果一个字段出现在 radio_fields 中，Django 将使用一个单选按钮接口。</select></p><p>字典形式，有HORIZONTAL 和 VERTICAL 两个选项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radio_fields = &#123;<span class="string">"field_name"</span>: admin.VERTICAL&#125;</span><br></pre></td></tr></table></figure><ul><li>ModelAdmin.autocomplete_fields | 新增，修改</li></ul><p>元组或列表，里面放入一对多或多对多字段，在新增或修改的时候可以通过异步搜索查找需要的选项</p><ul><li>ModelAdmin.raw_id_fields | 新增，修改</li></ul><p>元组或列表，里面放入一对多或多对多字段，默认情况下一对多或多对多会使用下拉菜单，但如果将他们放入这个选项中将取消他们的下拉菜单直接给出一个输入框供用户手动输入，并且给出一个查找图标，点击图标后可以通过一个弹出页面查看全部选项并进行选择</p><ul><li>ModelAdmin.readonly_fields | 新增，修改</li></ul><p>元组或列表，放置在此选项的字段会从新增或修改页面消失</p><ul><li>ModelAdmin.save_as | 修改页面</li></ul><p>默认为 False</p><p>默认情况下修改页面会显示：保存并增加另一个、保存并继续编辑、保存三个按钮，如果为True会将保存并新增另一个修改为保存为新对象</p><ul><li>ModelAdmin.save_as_continue | 修改页面</li></ul><p>默认为 True</p><p>如果为 False 在修改对象之后重定向到 changelist view</p><ul><li>ModelAdmin.save_on_top | 新增 | 修改</li></ul><p>一般来说保存按钮在底部，如果设为 True 底部和顶部都有</p><p>默认为 False</p><ul><li>ModelAdmin.search_fields | 展示页</li></ul><p>元组或列表</p><p>设置此选择项后会在展示页显示一个搜索栏</p><p>被填入的字段应该是文本字段，也可以使用双下划线来查找 ForeignKey 或 ManyToManyField 的内容</p><p>using the icontains lookup</p><p>example, if search_fields is set to [‘first_name’, ‘last_name’] and a user searches for john lennon, Django will do the equivalent of this SQL WHERE clause:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WHERE (first_name ILIKE &#39;%john%&#39; OR last_name ILIKE &#39;%john%&#39;)</span><br><span class="line">AND (first_name ILIKE &#39;%lennon%&#39; OR last_name ILIKE &#39;%lennon%&#39;)</span><br></pre></td></tr></table></figure><p>如果不想使用icontains作为查找，可以通过将其附加到字段来使用任何查找。例如，您可以通过将search_fields设置为 <code>[&#39;first_name_uuexact&#39;]</code> 来使用 <code>exact</code>。</p><ul><li>ModelAdmin.show_full_result_count | 展示页</li></ul><p>是否在展示页显示全部的结果数，默认为 True，默认情况下会产生一个额外的查询，而且如果数据量特别大的话这个查询会很消耗资源</p><ul><li>ModelAdmin.sortable_by | 展示页</li></ul><p>如果要对某些列禁用排序，请将sortable_by设置为要排序的list_display子集的集合（例如list、tuple或set）。空集合将禁用所有列的排序。</p><p>如果需要动态指定此列表，请改为实现get_sortable_by（）方法。</p><ul><li>ModelAdmin.view_on_site | 新增，修改</li></ul><p>此属性用来控制是否显示 View on stie 连接，这个链接会把你带到一个可以显示保存对象的URL</p><h4 id="custom-template-options"><a href="#custom-template-options" class="headerlink" title="custom template options"></a>custom template options</h4><p>使用以下选项覆盖ModelAdmin视图使用的默认模板：</p><ul><li>ModelAdmin.add_form_template</li></ul><p>Path to a custom template, used by add_view().</p><ul><li>ModelAdmin.change_form_template</li></ul><p>Path to a custom template, used by change_view().</p><ul><li>ModelAdmin.change_list_teimplate</li></ul><p>Path to a custom template, used by changelist_view().</p><ul><li>ModelAdmin.delete_confirmation_template</li></ul><p>Path to a custom template, used by delete_view() for displaying a confirmation page when deleting one or more objects.</p><ul><li>ModelAdmin.delete_selected_confirmaton_template</li></ul><p>Path to a custom template, used by the delete_selected action method for displaying a confirmation page when deleting one or more objects. See the actions documentation.</p><ul><li>ModelAdmin.object_history_template</li></ul><p>Path to a custom template, used by history_view().</p><ul><li>ModelAdmin.popup_response_template</li></ul><p>Path to a custom template, used by response_add(), response_change(), and response_delete().</p><h3 id="ModelAdmin-methods"><a href="#ModelAdmin-methods" class="headerlink" title="ModelAdmin methods"></a>ModelAdmin methods</h3><ul><li>ModelAdmin.save_model(request, obj, form, change)</li></ul><p>此方法需要传入一个 HttpRequest 一个 model 实例 一个 ModelForm 实例 一个决定此操作是新增还是修改的布尔值</p><p>重写这个方法允许做一些前置或者后置保存操作，调用 super().save_model() 使用 Model.save() 来保存对象</p><ul><li>ModelAdmin.delete_model(request, obj)</li></ul><p>此方法需要传入一个 HttpRequest 对象和一个 model 实例</p><p>重写此方法允许做一些前置或后置操作</p><p>调用 super().delete_model() 使用 Model.delete() 来删除对象</p><ul><li>ModelAdmin.delete_queryset(request, queryset)</li></ul><p>重写此方法以自定义 删除选定对象 操作的删除过程</p><ul><li>ModelAdmin.save_formset(request, form, formset, change)</li></ul><p>此方法需要传入一个 HttpRequest 一个 父类 ModelForm 实例 和一个决定是执行新增操作还是执行修改操作的布尔值</p><ul><li>ModelAdmin.get_ordering(request)</li></ul><p>返回一个类似 ordering 参数的列表或元组</p><ul><li>ModelAdmin.get_search_results(request, queryset, search_term)</li></ul><p>此方法提供使用 search 组件的搜索结果。接受一个 request和一个queryset使用当前filter和用户提供的搜索内容。还接受一个布尔值用来规定结果中是否允许重复值</p><ul><li>ModelAdmin.save_related(request, form, formsets, change)</li></ul><p>Here you can do any pre- or post-save operations for objects related to the parent. Note that at this point the parent object and its form have already been saved.</p><ul><li>ModelAdmin.get_autocomplete_fields(request)</li></ul><p>return a list or tuple of field names that will be displayed with an autocomplete widget as described above in the ModelAdmin.autocomplete_fields section.</p><ul><li><p>ModelAdmin.get_readonly_fields(request, obj=None)</p></li><li><p>ModelAdmin.get_prepopulated_fields(request, obj=None)</p></li><li><p>ModelAdmin.get_list_display(request)</p></li><li><p>ModelAdmin.get_list_display_links(request, list_display)</p></li><li><p>ModelAdmin.get_exclued(reqquest, obj=None)</p></li><li><p>ModelAdmin.get_fields(request, obj=None)</p></li><li><p>ModelAdmin.fields(request, obj=None)</p></li><li><p>ModelAdmin.getfieldsets(request, obj=None)</p></li><li><p>ModelAdmin.get_list_filter(request)</p></li><li><p>ModelAdmin.get_list_select_related(request)</p></li><li><p>ModelAdmin.get_search_fields(request)</p></li><li><p>ModelAdmin.get_sortable_by(request)</p></li><li><p>ModelAdmin.get_inline_instances(request, obj=None)</p></li><li><p>ModelAdmin.get_urls()</p></li></ul><p>The get_urls method on a ModelAdmin returns the URLs to be used for that ModelAdmin in the same way as a URLconf. </p><ul><li>ModelAdmin.get_form(reqeust, obj=None, **kwargs)</li></ul><p>Returns a ModelForm class for use in the admin add and change views, see add_view() and change_view().</p><ul><li><p>ModelAdmin.get_formsets_with_lines(request, obj=None)</p></li><li><p>ModelAdmin.formfield_for_foreignkey(db_field, request, **kwargs)</p></li><li><p>ModelAdmin.formfield_for_manytomant(db_field, request, **kwargs)</p></li><li><p>ModelAdmin.fromfield_for_choice_field(db_field, request, **kwargs)</p></li><li><p>ModelAdmin.get_changelist(request, **kwargs)</p></li><li><p>ModelAdmin.get_changelist_form(request, **kwargs)</p></li><li><p>ModelAdmin.get_changelist_formset(request, **kwargs)</p></li><li><p>ModelAdmin.lookup_allowed(lookup, value)</p></li><li><p>ModelAdmin.has_view_permission(request, obj=None)</p></li><li><p>ModelAdmin.has_add_permission(request)</p></li><li><p>ModelAdmin.has_change_permission(request, obj=None)</p></li><li><p>ModelAdmin.has_delete_permission(request, obj=None)</p></li><li><p>ModelAdmin.han_module_permission(request)</p></li><li><p>ModelAdmin.get_queryset(request)</p></li><li><p>ModelAdmin.message_user(request, message, level=meeesages.INFO, extra_tags=”, fail_silently=False)</p></li><li><p>ModelAdmin.get_paginator(request, queryset, per_page, orphans=0, allwo_empty_first_page=True)</p></li><li><p>ModelAdmin.response_add(request, obj, post_url_continu=None)</p></li><li><p>ModelAdmin.response_change(request, obj)</p></li><li><p>ModelAdmin.request_delete(request, obj)</p></li><li><p>ModelAdmin.get_changeform_inital_data(request)</p></li><li><p>ModelAdmin.get_deleted_objects(objs, request)</p></li></ul><h4 id="Other-methods"><a href="#Other-methods" class="headerlink" title="Other methods"></a>Other methods</h4><ul><li><p>ModelAdmin.add_view(request, form_url=””, extra_context=None)</p></li><li><p>ModelAdmin.change_view)request, object_id, form_url=””, extra_context=None)</p></li><li><p>ModelAdmin.changelist_view(request, extra_context=None)</p></li><li><p>ModelAdmin.delete_view(request, object_id, extra_context=None)</p></li><li><p>ModelAdmin.history_view(request, object_id, extra_context=None)</p></li></ul><h3 id="ModelAdmin-asset-definitions"><a href="#ModelAdmin-asset-definitions" class="headerlink" title="ModelAdmin asset definitions"></a>ModelAdmin asset definitions</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Media</span>:</span></span><br><span class="line">        css = &#123;</span><br><span class="line">            <span class="string">"all"</span>: (<span class="string">"my_styles.css"</span>,)</span><br><span class="line">        &#125;</span><br><span class="line">        js = (<span class="string">"my_code.js"</span>,)</span><br></pre></td></tr></table></figure><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><h3 id="Adding-custom-validation-to-the-admin"><a href="#Adding-custom-validation-to-the-admin" class="headerlink" title="Adding custom validation to the admin"></a>Adding custom validation to the admin</h3><h2 id="InlineModelAdmin-objects"><a href="#InlineModelAdmin-objects" class="headerlink" title="InlineModelAdmin objects"></a>InlineModelAdmin objects</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InlineModelAdmin</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">TabularInline</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">StackedInline</span></span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInline</span><span class="params">(admin.TabularInline)</span>:</span></span><br><span class="line">    model = Book</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    inlines = [</span><br><span class="line">        BookInline,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="InlineModelAdmin-options"><a href="#InlineModelAdmin-options" class="headerlink" title="InlineModelAdmin options"></a>InlineModelAdmin options</h3><p>略</p><h3 id="Working-with-a-model-with-two-or-more-foreign-keys-to-the-same-parent-model"><a href="#Working-with-a-model-with-two-or-more-foreign-keys-to-the-same-parent-model" class="headerlink" title="Working with a model with two or more foreign keys to the same parent model"></a>Working with a model with two or more foreign keys to the same parent model</h3><p>略</p><h3 id="Working-with-many-to-may-models"><a href="#Working-with-many-to-may-models" class="headerlink" title="Working with many-to-may models"></a>Working with many-to-may models</h3><p>略</p><h3 id="Working-with-many-to-many-intermediary-models"><a href="#Working-with-many-to-many-intermediary-models" class="headerlink" title="Working with many-to-many intermediary models"></a>Working with many-to-many intermediary models</h3><p>略</p><h3 id="Using-generic-relation-as-an-inline"><a href="#Using-generic-relation-as-an-inline" class="headerlink" title="Using generic relation as an inline"></a>Using generic relation as an inline</h3><p>略</p><h2 id="Overrding-admin-templates"><a href="#Overrding-admin-templates" class="headerlink" title="Overrding admin templates"></a>Overrding admin templates</h2><p>覆盖管理模块用于生成管理站点的各种页面的许多模板相对容易。您甚至可以为特定的应用程序或特定模式覆盖其中的一些模板</p><p> If you have customized the ‘loaders’ option, be sure ‘django.template.loaders.filesystem.Loader’ appears before ‘django.template.loaders.app_directories.Loader’ so that your custom templates will be found by the template loading system before those that are included with django.contrib.admin.</p><p>如果要修改 my_app 目录下全部 model  视图列表可以复制文件到 <code>templates/admin/my_app</code></p><p>如果想要添加一个 tool 在 change list 视图仅仅为一个叫 Page 的 model。可以赋值相同文件到 <code>templates/admin/my_app/page</code> 中</p><h3 id="Set-up-your-projects-admin-template-directories"><a href="#Set-up-your-projects-admin-template-directories" class="headerlink" title="Set up your projects admin template directories"></a>Set up your projects admin template directories</h3><p>first create an admin directory in your project’s templates directory. </p><h3 id="Overriding-vs-replacing-an-admin-template"><a href="#Overriding-vs-replacing-an-admin-template" class="headerlink" title="Overriding vs replacing an admin template"></a>Overriding vs replacing an admin template</h3><p>通常不建议替换整个模板，最好只覆盖需要更改的模板部分</p><h3 id="Templates-which-may-be-overridden-per-app-or-model"><a href="#Templates-which-may-be-overridden-per-app-or-model" class="headerlink" title="Templates which may be overridden per app or model"></a>Templates which may be overridden per app or model</h3><p>略</p><h3 id="Root-and-login-templates"><a href="#Root-and-login-templates" class="headerlink" title="Root and login templates"></a>Root and login templates</h3><p>略</p><h2 id="AdminSite-Object"><a href="#AdminSite-Object" class="headerlink" title="AdminSite Object"></a>AdminSite Object</h2><p>一个 Django 管理站点由 <code>django.contrib.admin.sites.AdminSite</code> 的实例来表示，默认情况下，这个类的实例被创建为 <code>django.contrib.admin.site</code>，你可以用它来注册你的模型和 ModelAdmin 实例。</p><p>可以通过覆盖它来自定义默认的管理站点。</p><p>当构造 AdminSite 实例时，可以使用构造函数的 name  参数提供一个唯一的实例名。这个实例名是用来识别实例的，特别是在 reversing admin URLs。如果没有提供，将使用名人的 admin</p><h3 id="AdminSite-attributes"><a href="#AdminSite-attributes" class="headerlink" title="AdminSite attributes"></a>AdminSite attributes</h3><ul><li><p>site_header<br>放在页面顶部的文字作为 H1 内的内容，默认：Django 管理</p></li><li><p>site_title<br>页面 title 结尾处放置的文字，默认：Django 站点管理员</p></li><li><p>site_url<br>管理页面顶部 查看站点 链接的 URL，默认：/，设为 None 可以删除该链接</p></li><li><p>index_title<br>管理站点首页顶部展示的文字，默认：网站管理</p></li><li><p>index_template<br>will be used by the admin site main index view.</p></li><li><p>app_index_template<br>will be used by the admin site app index view.</p></li><li><p>empty_value_display<br>用于在 change list 显示空值，默认为破折号。也可以被 ModelAdmin.empty_value_display 覆盖</p></li><li><p>login_template<br>will be used by the admin site login view.</p></li><li><p>login_form<br>will be used by the admin site login view.</p></li><li><p>logout_template<br>Path to a custom template that will be used by the admin site logout view.</p></li><li><p>password_change_template<br>will be used by the admin site password change view.</p></li><li><p>password_change_done_template<br>will be used by the admin site password change done view.</p></li></ul><h3 id="AdminSite-methods"><a href="#AdminSite-methods" class="headerlink" title="AdminSite methods"></a>AdminSite methods</h3><ul><li>AdminSite.each_context(request)<br>返回变量字典，用来放在 admin site 中每个页面的模板上下文中</li></ul><p>默认情况下包括以下变量和值：</p><ul><li><p>site_header:Adminsite.site_header</p></li><li><p>site_title:AdminSIte.site_title</p></li><li><p>site_url:AdminSite.site_url</p></li><li><p>has_permission:Admin.has_permission()</p></li><li><p>available_apps: 当前用户可以使用的应用程序注册表中的应用程序列表。列表中的每个条目都是一个代表 application 的字典，其键如下：</p><ul><li>app_label: 应用的 label</li><li>app_url：应用在 admin 中的 index URL</li><li>has_module_perms：表示是否允许当前用户显示和访问模块 index 页面的布尔值</li><li>models：应用程序中可用模型列表，每个 model 都是一个字典，包含以下几个键<ul><li>object_name：model 的类名</li><li>name：复数名</li><li>perms：一个跟踪添加、更改、删除和查看权限的字典</li><li>admin_url：admin changelist URL for the model</li><li>add_url：admin URL to add a new model instance</li></ul></li></ul></li><li><p>AdminSite.has_permission(request)<br>如果 HttpRequest 提供的用户邮权限查看管理员站点中至少一个页面，返回 True。默认要求 User.is_active 和 User.is_staff 为 True。</p></li><li><p>AdminSite.register(model_or_iterable, admin_class=None, **options)<br>admin_class 默认是 ModelAdmin。如果给定关键字参数，会作为选项应用到 admin 类</p></li></ul><p>如果一个模型是抽象的，会引发 ImproperlyConfigured</p><p>如果模型已经注册，会引发 django.contrib.admin.sites.AlreadyRegistered</p><h3 id="Hocking-AdminSite-instances-into-your-URLconf"><a href="#Hocking-AdminSite-instances-into-your-URLconf" class="headerlink" title="Hocking AdminSite instances into your URLconf"></a>Hocking AdminSite instances into your URLconf</h3><p>略</p><h3 id="Customizing-the-AdminSite-class"><a href="#Customizing-the-AdminSite-class" class="headerlink" title="Customizing the AdminSite class"></a>Customizing the AdminSite class</h3><p>略</p><h3 id="Overriding-the-default-admin-site"><a href="#Overriding-the-default-admin-site" class="headerlink" title="Overriding the default admin site"></a>Overriding the default admin site</h3><p>略</p><h3 id="Multiple-admin-sites-in-the-same-URLconf"><a href="#Multiple-admin-sites-in-the-same-URLconf" class="headerlink" title="Multiple admin sites in the same URLconf"></a>Multiple admin sites in the same URLconf</h3><p>略</p><h3 id="Adding-views-to-admin-sites"><a href="#Adding-views-to-admin-sites" class="headerlink" title="Adding views to admin sites"></a>Adding views to admin sites</h3><p>略</p><h3 id="Adding-a-password-reset-feature"><a href="#Adding-a-password-reset-feature" class="headerlink" title="Adding a password reset feature"></a>Adding a password reset feature</h3><p>略</p><h2 id="LogEntry-objects"><a href="#LogEntry-objects" class="headerlink" title="LogEntry objects"></a>LogEntry objects</h2><p>LogEntry类跟踪通过管理接口完成的对象的添加、更改和删除。</p><h3 id="LogEntry-attributes"><a href="#LogEntry-attributes" class="headerlink" title="LogEntry attributes"></a>LogEntry attributes</h3><ul><li>LogEntry.action_time</li></ul><p>The date and time of the action.</p><ul><li>LogEntry.user</li></ul><p>The user (an AUTH_USER_MODEL instance) who performed the action.</p><ul><li>LogEntry.content_type</li></ul><p>The ContentType of the modified object</p><ul><li>LogEntry.object_id</li></ul><p>The textual representation of the modified object’s primary key.</p><ul><li>LogEntry.object_repr</li></ul><p>The object`s repr() after the modification.</p><ul><li>LogEntry.ation_flag</li></ul><p>The type of action logged: ADDITION, CHANGE, DELETION.</p><ul><li>LogEntry.change_message</li></ul><p>The detailed description of the modification. </p><h3 id="LogEntry-methods"><a href="#LogEntry-methods" class="headerlink" title="LogEntry methods"></a>LogEntry methods</h3><ul><li>LogEntry.get_edited_object()</li></ul><p>A shortcut that returns the referenced object.</p><ul><li>LogEntry.get_change_message()</li></ul><h2 id="Reversing-admin-URLs"><a href="#Reversing-admin-URLs" class="headerlink" title="Reversing admin URLs"></a>Reversing admin URLs</h2><p>AdminSite</p><table><thead><tr><th>Page</th><th>URL name</th><th>Parameters</th></tr></thead><tbody><tr><td>Index</td><td>index</td><td></td></tr><tr><td>Login</td><td>login</td><td></td></tr><tr><td>Logout</td><td>logout</td><td></td></tr><tr><td>Password change</td><td>password_change</td><td></td></tr><tr><td>Password change done</td><td>password_change_done</td><td></td></tr><tr><td>i18n JavaScript</td><td>jsi18n</td><td></td></tr><tr><td>Application index page</td><td>app_list</td><td>app_label</td></tr><tr><td>Redirect to object’s page</td><td>view_on_site</td><td>content_type_id, object_id</td></tr></tbody></table><p>ModelAdmin</p><table><thead><tr><th>Page</th><th>URL name</th><th>Parameters</th></tr></thead><tbody><tr><td>Changelist</td><td><code>__changelist</code></td><td></td></tr><tr><td>Add</td><td><code>-_add</code></td><td></td></tr><tr><td>History</td><td><code>-_history</code></td><td>object_id</td></tr><tr><td>Delete</td><td><code>-_delete</code></td><td>object_id</td></tr><tr><td>Change</td><td><code>-_change</code></td><td>object_id</td></tr></tbody></table><p>UserAdmin</p><table><thead><tr><th>Page</th><th>URL name</th><th>Parameters</th></tr></thead><tbody><tr><td>Password change</td><td>auth_user_password_change</td><td>user_id</td></tr></tbody></table><h2 id="The-staff-member-required-decorator"><a href="#The-staff-member-required-decorator" class="headerlink" title="The staff_member_required decorator"></a>The staff_member_required decorator</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;记&quot;&gt;&lt;a href=&quot;#记&quot; class=&quot;headerlink&quot; title=&quot;记&quot;&gt;&lt;/a&gt;记&lt;/h2&gt;&lt;p&gt;一下内容是我阅读 Django 官方文档 admin 相关内容时随手翻译的，内容未经整理&lt;/p&gt;
&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="2-软件使用" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Django" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/Django/"/>
    
    
      <category term="Django" scheme="https://wiki.blanc.site/tags/Django/"/>
    
      <category term="学习笔记" scheme="https://wiki.blanc.site/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Django app 笔记</title>
    <link href="https://wiki.blanc.site/archives/44c1e81d.html"/>
    <id>https://wiki.blanc.site/archives/44c1e81d.html</id>
    <published>2020-08-11T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记"><a href="#记" class="headerlink" title="记"></a>记</h2><p>以下内容是我阅读 Django 官方文档 app 相关内容时随手翻译的，内容未经整理</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="django-apps"><a href="#django-apps" class="headerlink" title="django.apps"></a>django.apps</h3><h4 id="init-py"><a href="#init-py" class="headerlink" title="init.py"></a><strong>init</strong>.py</h4><p>向外部提供 AppConfig apps 两个属性</p><table><thead><tr><th>模块</th><th>提供内容</th></tr></thead><tbody><tr><td>config.py</td><td>AppConfig</td></tr><tr><td>registry.py</td><td>apps</td></tr></tbody></table><h4 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a>config.py</h4><p>提供一个 AppConfig 类</p><h4 id="registry-py"><a href="#registry-py" class="headerlink" title="registry.py"></a>registry.py</h4><p>提供一个 Apps 类</p><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>Django 包含一个已安装 apps 的注册表，它存储配置信息并提供 introspection。它还维护着一个可用模型的列表。</p><p>这个注册表简称为 apps，在 django.apps 中可以找到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> apps</span><br><span class="line">apps.get_app_config(<span class="string">'admin'</span>).verbose_name</span><br></pre></td></tr></table></figure><h3 id="项目和应用（projects-and-applications）"><a href="#项目和应用（projects-and-applications）" class="headerlink" title="项目和应用（projects and applications）"></a>项目和应用（projects and applications）</h3><p>Project 一词描述了一个 Django Web Application。</p><p>一个 projects 的根目录（包含 manage.py 的目录）通常是一个存放所有 projects 中未单独安装的 applications 的容器</p><p>Applications 一词描述了一个提供一些功能集的 Python package。Applications 可以在不同 projects 中重复使用。</p><p>Applications 是由 models views templates tempalte tags static files URLs middleware等模块自由组合而成。它们一般是用过写入 INSTALLED_APPS 配置相中或一些其他机制（如 URLconfis MIDDLEWARE 设置或模板继承）连接到项目中。</p><p>理解 Django applications 是一组与框架各部分交互的代码 很重要。实际上并不存在 Application 对象。然而，在某些情况下 Django 需要和已安装的 Application 进行交互，主要是为了配合，有时也为了 introspection。这也是为什么应用注册表为每个安装的应用在 AppConfig 实例中维护元数据。</p><p>Django 没有限制一个 project package 不能同时作为一个 Application，并拥有 models 等。（如果真的把 project package 也当做一个应用，需要将它添加到 INSTALLED_APPS 里）</p><h3 id="配置应用（Configuring-applications）"><a href="#配置应用（Configuring-applications）" class="headerlink" title="配置应用（Configuring applications）"></a>配置应用（Configuring applications）</h3><p>要配置一个 application，就需要子类化 AppConfig，并在 INSTALLED_APPS 中配置该子类的路径。</p><p>当 INSTALLED_APPS 中包含一个应用模块的路径时，Django 会检查该模块中是否存在 default_app_config 变量</p><p>如果有，它就是该应用对应的的 AppConfig 子类</p><p>如果没有，Django 就使用基础的（默认的）AppConfig 类</p><p>default_app_config 允许 Django.contrib.admin 等早于 Django 1.7 的应用选择加入 AppConfig 功能，而不需要用户更新他们的 INSTALLED_APPS。</p><p>新的应用程序应该避免使用 default_app_config。相反，他们应该要求在 INSTALLED_APPS 中明确配置相应的 AppConfig 子类的虚线路径。</p><h4 id="对于-application-创建者"><a href="#对于-application-创建者" class="headerlink" title="对于 application 创建者"></a>对于 application 创建者</h4><p>如果正在创建一个叫做 Rock 的可插拔 app，下面这个例子描述了如何为 admin 提供一个合适的名字 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rock/apps.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RockConfig</span><span class="params">(AppConfig)</span>:</span></span><br><span class="line">    name = <span class="string">"rock"</span></span><br><span class="line">    verbose_name =  <span class="string">"Rock"</span></span><br></pre></td></tr></table></figure><p>可以通过下面的代码将 application 加载到 AppConfig 子类中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rock/__init__.py</span></span><br><span class="line"></span><br><span class="line">default_app_config = <span class="string">"rock.apps.RockConfig"</span></span><br></pre></td></tr></table></figure><p>这样就可以实现只需要在 INSTALLED_APPS 中设置 “rock” 就可以将 RockConfig 导入。这样就可以在不需要用户更新 INSTALLED_APPS 设置的情况下使用 AppConfig 功能。除了这个使用场景（用例）之外最好避免使用 default_app_config，而在 INSTALLED_APPS 中指定 app config class，如下。</p><p>当然，同样可以在 INSTALLED_APPS 中添加 <code>rock.apps.RockConfig</code> 实现同样的效果。甚至可以提供多个不同行为的 AppConfig 子类，让用户荣国 INSTALLED_APPS 设置选择其中某一个。</p><p>推荐将配置类放在 application 目录下名为 apps 的模块中。但是 Django 并没有强制要求。</p><p>配置中必须包含 name 属性来确定这个配置适用于那个应用。</p><h4 id="对于-application-用户"><a href="#对于-application-用户" class="headerlink" title="对于 application 用户"></a>对于 application 用户</h4><p>略</p><h3 id="Application-configraution"><a href="#Application-configraution" class="headerlink" title="Application configraution"></a>Application configraution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django.app.config</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="Configurable-attributes"><a href="#Configurable-attributes" class="headerlink" title="Configurable attributes"></a>Configurable attributes</h4><ul><li><p>AppConfig.name<br>Application 完整的 Python 路径，例如：django.contrib.admin<br>它在 Django project 中必须是唯一的</p></li><li><p>AppConfig.label<br>Application 的短一点的名字，例如：admin</p></li><li><p>AppConfig.verbose_name<br>Application 人类可读的名字，例如：Administration</p></li><li><p>AppConfig.path<br>指向 Application 文件的完整路径</p></li></ul><h4 id="Read-only-attributes"><a href="#Read-only-attributes" class="headerlink" title="Read-only attributes"></a>Read-only attributes</h4><ul><li><p>AppConfig.module<br>Application 的跟模块，例如：&lt;module ‘django.contrib.admin’ from ‘django/contrib/admin/<strong>init</strong>.py’&gt;</p></li><li><p>AppConfig.models_module<br>包含 model 的模块中，例如：&lt;module ‘django.contrib.damin.models’ from ‘django/contrib/admin/models.py&gt;<br>如果 Application 不包含 models 模块，则可能是 None。需要注意：pre_migrate 和 post_migrate 等与数据库相关的信号支队有 models 模块的应用发出</p></li></ul><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><ul><li><p>AppConfig.get_models()<br>返回这个 Application 的 Model iterable</p></li><li><p>AppConfig.get_model(model_name, require_ready=True)<br>根据给出的 model_name.model_name 返回 Model（不区分大小写）</p></li></ul><p>如果 Application 中不存在这个模块抛出 LookupError</p><p>除非 require_ready 参数为False，否则要求 app 注册表被完全填充。require_ready的行为与app.get_model()中的行为完全相同。</p><ul><li>AppConfig.ready()<br>子类可以重写这个方法来执行初始化任务，比如注册信号。一旦注册表被完全 populated 它就会被调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> pre_save</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ready</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># importing model classes</span></span><br><span class="line">    <span class="keyword">from</span> .models <span class="keyword">import</span> MyModel  <span class="comment"># or...</span></span><br><span class="line">    MyModel = self.get_model(<span class="string">'MyModel'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># registering signals with the model's string label</span></span><br><span class="line">    pre_save.connect(receiver, sender=<span class="string">'app_label.MyModel'</span>)</span><br></pre></td></tr></table></figure><p>虽然可以像上面描述的一样访问模型类，但要避免在 ready 中与数据库进行交互</p><p>通常情况下 ready 只会被调用一次。但是在某些特殊情况下（特别是在测试中）会被调用不止一次。在这种情况下，要么写idempotent方法，要么在你的AppConfig类上加一个标志，以防止重新运行那些应该被精确执行一次的代码。</p><h4 id="Namespace-packages-as-apps"><a href="#Namespace-packages-as-apps" class="headerlink" title="Namespace packages as apps"></a>Namespace packages as apps</h4><p>略</p><h3 id="Application-registry"><a href="#Application-registry" class="headerlink" title="Application registry"></a>Application registry</h3><ul><li><p>apps.ready<br>布尔值，在注册完全 populated 并且所有 AppConfig.ready() 函数被调用后设为 True</p></li><li><p>apps.get_app_configs()<br>返回一个 AppConfig 实例 iterbale</p></li><li><p>apps.get_app_config(app_label)<br>通过给出的 app_label 返回 Application 的 AppConfig，如果不存在的话抛出 LookupError</p></li><li><p>apps.is_installed(app_name)<br>检查给出的 app 是否存在于注册表。app_name 是完整名字，例如：django.contrib.admin</p></li><li><p>apps.get_model(app_label, model_name, require_ready=True)<br>通过给出的 app_label 和 model_name 返回 Model。</p></li></ul><h3 id="Initialization-process"><a href="#Initialization-process" class="headerlink" title="Initialization process"></a>Initialization process</h3><h4 id="How-applications-are-loaded"><a href="#How-applications-are-loaded" class="headerlink" title="How applications are loaded"></a>How applications are loaded</h4><p>当 Django启动，django.setup() 负责填充应用程序注册表</p><p>setup(set_prefix=True)</p><p>通过以下内容配置 Django：</p><ol><li>Loading the settings</li><li>setting up logging</li><li>如果set_prefix为True，如果定义了URL解析器脚本前缀，则将其设置为FORCE_SCRIPT_NAME，否则为/。</li><li>初始化应用程序注册表</li></ol><p>此函数会在一下情况下被自动调用：</p><ol><li>当通过 Django WSGI 运行 HTTP 服务时</li><li>当运行一个管理命令时<br>在其他情况下，例如在 Python scripts 中，必须显示调用该函数</li></ol><p>应用程序注册表的初始化分为三个阶段。在每个阶段，Django都会按照INSTALLED_APPS的顺序处理所有的应用程序。</p><ol><li>首先，Django导入INSTALLED_APPS中的每个项目。</li></ol><p>如果是应用配置类，Django会导入应用的根包，由其name属性定义。如果是一个Python包，Django会创建一个默认的应用配置。</p><p>在这个阶段，你的代码不应该导入任何模型!</p><p>换句话说，你的应用程序的根包和定义应用程序配置类的模块不应该导入任何模型，即使是间接导入。</p><p>严格来说，Django允许在加载应用配置后导入模型。但是，为了避免对INSTALLED_APPS的顺序进行不必要的限制，强烈建议不要在这个阶段导入任何模型。</p><p>一旦这个阶段完成，对应用配置进行操作的API，如get_app_config()就可以使用了。</p><ol start="2"><li>然后Django会尝试导入每个应用的models子模块，如果有的话。</li></ol><p>你必须在你的应用程序的models.py或models/<strong>init</strong>.py中定义或导入所有模型。否则，应用程序注册表可能在此时没有完全填充，这可能导致ORM故障。</p><p>一旦这个阶段完成，对模型进行操作的API，如get_model()就可以使用了。</p><ol start="3"><li>最后Django会运行每个应用配置的ready()方法。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;记&quot;&gt;&lt;a href=&quot;#记&quot; class=&quot;headerlink&quot; title=&quot;记&quot;&gt;&lt;/a&gt;记&lt;/h2&gt;&lt;p&gt;以下内容是我阅读 Django 官方文档 app 相关内容时随手翻译的，内容未经整理&lt;/p&gt;
&lt;h2 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分
      
    
    </summary>
    
    
      <category term="2-软件使用" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Django" scheme="https://wiki.blanc.site/categories/2-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/Django/"/>
    
    
      <category term="Django" scheme="https://wiki.blanc.site/tags/Django/"/>
    
      <category term="学习笔记" scheme="https://wiki.blanc.site/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>所谓 WSGI</title>
    <link href="https://wiki.blanc.site/archives/7a294715.html"/>
    <id>https://wiki.blanc.site/archives/7a294715.html</id>
    <published>2020-06-24T00:00:00.000Z</published>
    <updated>2021-05-23T12:08:45.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>如果你也想阅读 WSGI 相关的 PEP 规范，建议直接阅读 <a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a>，因为 <a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a> 对 <a href="https://www.python.org/dev/peps/pep-333/" target="_blank" rel="external nofollow noopener noreferrer">PEP 333</a> 是向下兼容的，也可以说 <a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a> 是对 <a href="https://www.python.org/dev/peps/pep-333/" target="_blank" rel="external nofollow noopener noreferrer">PEP 333</a> 的补充。</li></ol><h2 id="何为-WSGI？"><a href="#何为-WSGI？" class="headerlink" title="何为 WSGI？"></a>何为 WSGI？</h2><blockquote><p>This document specifies a proposed standard interface between web servers and Python web applications or frameworks, to promote web application portability across a variety of web servers.</p><p>本文档详细描述了一个建议用在 Web 服务器和 Python Web 应用或框架之间的标准接口，以提升 Web 应用在各类 Web 服务器之间的可移植性。</p><p>from <a href="https://www.python.org/dev/peps/pep-3333/#abstract" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a></p></blockquote><p>从 <a href="https://www.python.org/dev/peps/pep-3333/#abstract" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a> 的这段总结来看，WSGI 就是一个 Python 官方建议用在 Web 服务器和 Python Web 应用框架之间的标准接口。</p><h3 id="何为-Web-服务器"><a href="#何为-Web-服务器" class="headerlink" title="何为 Web 服务器"></a>何为 Web 服务器</h3><p>首先，什么是服务器（server）？<br>一般来说，server 有两重意思：</p><ol><li>有时 server 表示硬件，也就是一台机器，也可称为「主机」；</li><li>更多的时候 server 表示软件程序，这种程序主要用来对外提供某种服务，比如：邮件服务、FTP 服务、数据库服务、网页服务等等。</li></ol><p>作为开发者，一般提到 server 时指的都是后者，即一个长时间运行的软件程序。</p><p>所以，什么是 Web Server？<br>通俗的来讲 Web Server 就是一个提供 Web 服务的应用程序。<br>常见的符合 WSGI 规范的 Web Server 有 uWSGI、gunicorn 等等。</p><h3 id="何为-Web-应用或框架"><a href="#何为-Web-应用或框架" class="headerlink" title="何为 Web 应用或框架"></a>何为 Web 应用或框架</h3><p>Web 框架在如今是比较常见的，比较知名的 Python Web 框架有：Django、Flask、Pyramid等等。反倒是 Web 应用不太常见，（个人理解）一般情况下只有在本地测试的时候会写一些简单的 Python Web 应用，平时的开发大多还是使用开源（或公司内部）的 Web 框架。</p><h2 id="为什么需要-WSGI"><a href="#为什么需要-WSGI" class="headerlink" title="为什么需要 WSGI"></a>为什么需要 WSGI</h2><p>作为一个近两年刚接触到 Python Web 编程的新手，在日常的编程过程中完全没有见过所谓的 WSGI，但是我依然可以写好一个完整的 Web 应用，这是为什么？WSGI 有存在的必要嘛？</p><p>答案肯定是：有存在的必要。</p><p>首先解释一下为什么我在过去两年的过程中没有见过 WSGI 却依旧可以进行 Web 编程：因为现在的大多数框架都已经帮我们将 WSGI 标准封装在框架底层。甚至，我用的 Django REST Framework 框架连 HTTP Request 和 HTTP Response 都帮我封装好了。所以，就算我完全不了解 WSGI 这种偏底层的协议也能够进行日常的 Web 开发。</p><p>那 WSGI 到底解决了什么问题？这个在 <a href="https://www.python.org/dev/peps/pep-3333/#original-rationale-and-goals-from-pep-333" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a> 中有详细的解释，简单的说一下我的理解：在 WSGI 诞生之前，就已经存在了大量使用 Python 编写的 Web 应用框架，相应的也存在很多 Web 服务器。但是，各个 Python Web 框架和 Python Web 服务器之间不能互相兼容。夸张一点说，在当时如果想要开发一个 Web 框架说不定还得单独为这个框架开发一个 Web 服务器（而且这个服务器别的框架还不能用）。为了解决这一现象 Python 社区提交了 <a href="https://www.python.org/dev/peps/pep-333/" target="_blank" rel="external nofollow noopener noreferrer">PEP 333</a>，正式提出了 WSGI 这个概念。</p><p>简单的理解：只要是兼容 WSGI 的 Web 服务器和 Web 框架就能配套使用。开发服务器的程序员只需要考虑在兼容 WSGI 的情况下如何更好的提升服务器程序的性能；开发框架的程序员只需要考虑在兼容 WSGI 的情况下如何适应尽可能多业务开发逻辑（以上只是举例并非真的这样）。</p><p>WSGI 解放了 Web 开发者的精力让他们可以专注于自己需要关注的事情。</p><h2 id="WSGI-做了什么事情？"><a href="#WSGI-做了什么事情？" class="headerlink" title="WSGI 做了什么事情？"></a>WSGI 做了什么事情？</h2><p>注：为了简练而写成了 WSGI 做了什么事情，实际上 WSGI 只是一个规范并不是实际的代码，准确的来说应该是「符合 WSGI 规范的 Web 体系做了什么事情？」</p><p>上面已经提到，WSGI 通过规范化 Web 框架和 Web 服务器之间的接口，让兼容了 WSGI 的框架和服务器能够自由组合使用……</p><p>所以，WSGI 究竟做了什么，让一切变得如此简单？</p><p>在 <a href="https://www.python.org/dev/peps/pep-3333/#specification-overview" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a> 中对 WSGI 进行了一段简单的概述，这里我结合看过的 <a href="https://skyline75489.github.io/post/2014-9-8_python-wsgi-learning.html" target="_blank" rel="external nofollow noopener noreferrer">一篇博文</a> 进行简单的概括：</p><p>（简单来说）WSGI 将 Web 分成了三个部分，从上到下分别是：Application/Framework, Middleware 和 Server/Grageway，各个部分之间高度解耦尽可能的做到不互相依赖。</p><ol><li>（通常情况下）客户端（一般为浏览器）会向 Server 发送 HTTP 请求以获取数据。</li><li>符合 WSGI 规范的 Server 在接收到请求之后会调用指定的符合 WSGI 规范的 Web Application，并传入 environ 和 start_response 两个参数（并不强制命名，只是一般会这么命名）。</li><li>Web Application 在接收到请求后会生成一个打包好的 HTTP Response 传给 start_response。</li><li>Server 会将 HTTP Response 进行汇总待请求处理完且没有错误时将整个 HTTP Response 内容返回给客户端。</li></ol><p>Middleware 属于三个部分中最为特别的一个，对于 Server 他是一个 Application，对于 Application 它是一个 Server。通俗的来说就是 Middleware 面对 Server 时能够展现出 Application 应有的特性，而面对 Application 时能够展现出 Server 应有的特性，由于这一特点 Middleware 在整个协议中起到了承上启下的功能。在现实开发过程中，还可以通过嵌套 Middleware 以实现更强大的功能。</p><h2 id="WSGI-是如何工作的？"><a href="#WSGI-是如何工作的？" class="headerlink" title="WSGI 是如何工作的？"></a>WSGI 是如何工作的？</h2><p>通过上一小节能够大概的了解到 WSGI 在一次完整的请求中究竟做了什么。下面再来介绍一下一个完整的 WSGI Web 体系是如何工作的。</p><h3 id="一个符合-WSGI-规范的-Python-Web-项目实例"><a href="#一个符合-WSGI-规范的-Python-Web-项目实例" class="headerlink" title="一个符合 WSGI 规范的 Python Web 项目实例"></a>一个符合 WSGI 规范的 Python Web 项目实例</h3><p>为了方便展示先来构建一个符合 WSGI 规范的 Python Web 项目示例：</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>注：示例基于 Python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本示例代码改自参考文章 5：</span></span><br><span class="line"><span class="comment"># Huang Huang 的博客-翻译项目系列-让我们一起来构建一个 Web 服务器</span></span><br><span class="line"><span class="comment"># /path_to_code/server.py</span></span><br><span class="line"><span class="comment"># Examples of wsgi server</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据系统导入响应的 StringIO 模块</span></span><br><span class="line"><span class="comment"># StringIO：用于文本 I/O 的内存数据流</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIServer</span><span class="params">(object)</span>:</span></span><br><span class="line">    request_queue_size = <span class="number">1</span>              <span class="comment"># 请求队列长度</span></span><br><span class="line">    address_family = socket.AF_INET     <span class="comment"># 设置地址簇</span></span><br><span class="line">    socket_type = socket.SOCK_STREAM    <span class="comment"># 设置 socket 类型</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address)</span>:</span></span><br><span class="line">        <span class="comment"># Server 初始化方法（构造函数）</span></span><br><span class="line">        <span class="comment"># Create a listening socket</span></span><br><span class="line">        self.listen_socket = listen_socket = socket.socket(</span><br><span class="line">            self.address_family,</span><br><span class="line">            self.socket_type</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 设置 socket 允许重复使用 address</span></span><br><span class="line">        listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># Bind 绑定端口</span></span><br><span class="line">        listen_socket.bind(server_address)</span><br><span class="line">        <span class="comment"># Activate 激活</span></span><br><span class="line">        listen_socket.listen(self.request_queue_size)</span><br><span class="line">        <span class="comment"># 获取并记录 server host 和 port</span></span><br><span class="line">        host, port = self.listen_socket.getsockname()[:<span class="number">2</span>]</span><br><span class="line">        self.server_name = socket.getfqdn(host)</span><br><span class="line">        self.server_port = port</span><br><span class="line">        <span class="comment"># Return headers set by Web framework/application</span></span><br><span class="line">        self.headers_set = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_app</span><span class="params">(self, application)</span>:</span></span><br><span class="line">        <span class="comment"># 将传入的 application 设置为实例属性</span></span><br><span class="line">        self.application = application</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_forever</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 开启 server 循环函数</span></span><br><span class="line">        listen_socket = self.listen_socket</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 获取 client socket 参数 | client_connection 是 client socket 实例</span></span><br><span class="line">            <span class="comment"># 这里会创建一个阻塞，直到接受到 client 连接为止</span></span><br><span class="line">            self.client_connection, client_address = listen_socket.accept()</span><br><span class="line">            <span class="comment"># 调用 handle_one_request 方法处理一次请求并关闭 client 连接然后继续等待新的连接进入</span></span><br><span class="line">            self.handle_one_request()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_one_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 处理请求的入口方法 | 用来处理一次请求</span></span><br><span class="line">        <span class="comment"># 从 client socket 中获取 request data</span></span><br><span class="line">        self.request_data = request_data = self.client_connection.recv(<span class="number">1024</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 调用 parse_request 方法， 传入接收到的 request_data 并对其进行解析</span></span><br><span class="line">        self.parse_request(request_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 通过已有数据构造环境变量字典</span></span><br><span class="line">        environ = self.get_environ()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用 application，传入已经生成好的 environ 和 start_response，返回一个可迭代的 Response 对象</span></span><br><span class="line">        result = self.application(environ, self.start_response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用 finish_response 方法，构造一个响应并返回给客户端</span></span><br><span class="line">        self.finish_response(result)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_request</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        <span class="comment"># 取行</span></span><br><span class="line">        request_line = text.splitlines()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 打碎请求行到组件中</span></span><br><span class="line">        (self.request_method,</span><br><span class="line">         self.path,</span><br><span class="line">         self.request_version</span><br><span class="line">        ) = request_line.split()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_environ</span><span class="params">(self)</span>:</span></span><br><span class="line">        env = &#123;&#125;</span><br><span class="line">        env[<span class="string">"wsgi.version"</span>] = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        env[<span class="string">"wsgi.url_scheme"</span>] = <span class="string">"http"</span></span><br><span class="line">        env[<span class="string">"wsgi.input"</span>] = StringIO(self.request_data.decode(<span class="string">"utf-8"</span>))</span><br><span class="line">        env[<span class="string">"wsgi.errors"</span>] = sys.stderr</span><br><span class="line">        env[<span class="string">"wsgi.multithread"</span>] = <span class="literal">False</span></span><br><span class="line">        env[<span class="string">"wsgi.multiprocess"</span>] = <span class="literal">False</span></span><br><span class="line">        env[<span class="string">"wsgi.run_once"</span>] = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># Required CGI variables</span></span><br><span class="line">        env[<span class="string">"REQUEST_METHOD"</span>] = self.request_method</span><br><span class="line">        env[<span class="string">"PATH_INFO"</span>] = self.path.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        env[<span class="string">"SERVER_NAME"</span>] = self.server_name</span><br><span class="line">        env[<span class="string">"SERVER_PORT"</span>] = str(self.server_port)</span><br><span class="line">        <span class="keyword">return</span> env</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self, status, response_headers, exc_info=None)</span>:</span></span><br><span class="line">        <span class="comment"># 按照 WSGI 规范提供一个 start_response 给 application</span></span><br><span class="line">        <span class="comment"># Add necessary必要的 server headers</span></span><br><span class="line">        server_headers = [</span><br><span class="line">            (<span class="string">"Date"</span>, <span class="string">"Tue, 31 Mar 2020 12:51:48 GMT"</span>),</span><br><span class="line">            (<span class="string">"Server"</span>, <span class="string">"WSGIServer 0.2"</span>)</span><br><span class="line">        ]</span><br><span class="line">        self.headers_set = [status, response_headers + server_headers]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 按照 WSGI 协议，应该在这里返回一个 write()，但这里为了简便就省略了</span></span><br><span class="line">        <span class="comment"># 会在后续分析 wsgiref 源码时提及此处</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish_response</span><span class="params">(self, result)</span>:</span></span><br><span class="line">        <span class="comment"># 通过现有参数整理出一个响应体</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            status, response_headers = self.headers_set</span><br><span class="line">            <span class="comment"># 响应第一部分：HTTP 协议以及状态码</span></span><br><span class="line">            response = <span class="string">f"HTTP/1.1 <span class="subst">&#123;status&#125;</span>\r\n"</span></span><br><span class="line">            <span class="comment"># 响应第二部分：将生成好的响应头递归式的传入响应体内</span></span><br><span class="line">            <span class="keyword">for</span> header <span class="keyword">in</span> response_headers:</span><br><span class="line">                response += <span class="string">"&#123;0&#125;: &#123;1&#125;\r\n"</span>.format(*header)</span><br><span class="line">            <span class="comment"># 通过 \r\n 进行空行</span></span><br><span class="line">            response += <span class="string">"\r\n"</span></span><br><span class="line">            <span class="comment"># 响应第三部分：将响应主题信息追加到响应体内</span></span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> result:</span><br><span class="line">                response += data</span><br><span class="line">            <span class="comment"># 通过 senall 将响应发送给客户端</span></span><br><span class="line">            <span class="comment"># 注意：在 Python3 下，如果你构建的响应体为 str 类型，需要进行 encode 转换为 bytes</span></span><br><span class="line">            self.client_connection.sendall(response.encode())</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 关闭连接</span></span><br><span class="line">            self.client_connection.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /path_to_code/middleware.py</span></span><br><span class="line"><span class="comment"># Examples of wsgi middleware</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, application)</span>:</span></span><br><span class="line">        self.application = application</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">core</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        old_response = self.application(environ, start_response)</span><br><span class="line">        new_response = old_response + [<span class="string">"middleware add this message\n"</span>]</span><br><span class="line">        <span class="keyword">return</span> new_response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.core(environ, start_response)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /path_to_code/application.py</span></span><br><span class="line"><span class="comment"># Examples of wsgi application</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    status = <span class="string">"200 OK"</span></span><br><span class="line">    response_headers = [(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)]</span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">"hello world from a simple WSGI application!\n"</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /path_to_code/run.py</span></span><br><span class="line"><span class="comment"># running Example</span></span><br><span class="line"><span class="keyword">from</span> server <span class="keyword">import</span> WSGIServer</span><br><span class="line"><span class="keyword">from</span> application <span class="keyword">import</span> application</span><br><span class="line"><span class="keyword">from</span> middleware <span class="keyword">import</span> TestMiddleware</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规定 server host 和 server port</span></span><br><span class="line">server_address = (host, port) = <span class="string">""</span>, <span class="number">8888</span></span><br><span class="line"><span class="comment"># 创建 server 实例</span></span><br><span class="line">server = WSGIServer(server_address)</span><br><span class="line"><span class="comment"># 设置本 server 对应的 middleware 以及 application</span></span><br><span class="line">server.set_app(TestMiddleware(application))</span><br><span class="line"><span class="comment"># 输出提示性语句</span></span><br><span class="line">print(<span class="string">f"WSGIServer: Serving HTTP on port: <span class="subst">&#123;port&#125;</span>...\n"</span>)</span><br><span class="line"><span class="comment"># 进入 server socket 监听循环</span></span><br><span class="line">server.server_forever()</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>将四段代码分别复制到同一目录的四个文件（如果没有按照示例给出的命名记得更改一下 run 模块中相应的 import 的模块名）中。</p><p>注：以下操作默认你完全按照示例代码中给出的命名进行文件命名</p><ol><li>启动 server：<code>python /path_to_code/run.py</code></li><li>通过浏览器浏览 <code>127.0.0.1:8888</code> 查看效果</li><li>通过 curl 命令 <code>curl -v http://127.0.0.1:8888</code> 查看完整输出</li><li>对比 <code>curl -v https://baidu.com</code> 的输出查看区别</li></ol><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><h5 id="代码运行流程分析"><a href="#代码运行流程分析" class="headerlink" title="代码运行流程分析"></a>代码运行流程分析</h5><p>上面我根据 WSGI 协议编写了三个文件（模块）：server.py middleware.py application.py，分别对应 WSGI 里 server middleware application 这三个概念。然后通过 run.py 引入三个模块组成了一个完整的 server-middleware-application Web 程序并监听本地 8888 端口。</p><p>通过 run.py 中的代码我们能够清晰的看到一个 WSGI 类型的 Web 程序的运行流程：</p><ol><li>创建 wsgi server socket 实例对象（调用 <code>server.__init__</code> 方法）</li><li>将准备好的 middleware 以及 application 对象导入给 server 实例（调用 <code>server.set_app</code> 方法）</li><li>运行 server 监听指定端口（调用 <code>server.server_forever</code> 方法）</li></ol><p>通过 server.py 中的代码能够清晰的看到一个 WSGI 类型的 Web 程序是如何处理 HTTP 请求的：</p><ol><li>通过 <code>server_forever</code> <strong>监听到</strong>客户端请求并<strong>记录请求信息</strong></li><li>调用 <code>handle_one_request</code> 方法处理此请求<ol><li>通过请求 socket <strong>获取请求数据</strong></li><li>通过 <code>parse_request</code> 方法将请求数据<strong>解析</strong>成所需格式</li><li>通过 <code>get_environ</code> 方法利用现有数据构造环境变量<strong>字典</strong></li><li>将生成好的 environ 参数和 start_response 方法传给 application 对象（<strong>也可能是 middleware 伪装的 application 对象</strong>），并获取响应结果</li><li>将响应结果传给 <code>finish_response</code> 方法构造一个<strong>可迭代的</strong>响应对象返回给客户端并结束本次请求</li></ol></li></ol><p>通过 middleware.py 中的代码就能够理解一个 WSGI 中间件是如何工作的：</p><ol><li>通过在 <code>__init__</code> 方法中接收一个 application 将自己伪装成一个 server</li><li>通过在 <code>__call__</code> 方法中接收 environ 和 start_response 参数将自己伪装成一个 application<br>通过这两点伪装 middleware 能够很好的粘合在 server 和 application 之间完成中间逻辑处理，在 <a href="https://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a> 中指明了中间件的几点常见用途。</li></ol><p>至于 application.py 在这里就真的只是一个简单的单文件 WSGI 应用。当然也可以尝试用写好的 server.py 和 middleware.py 对接像 Django 这样的框架，但需要对代码做一些修改，这里就不展开讨论了，有兴趣可以自己尝试。</p><h5 id="浏览器结果分析"><a href="#浏览器结果分析" class="headerlink" title="浏览器结果分析"></a>浏览器结果分析</h5><p>在运行 run.py 之后使用浏览器浏览 <code>127.0.0.1:8888</code> 并查看结果如下：</p><p><img src="https://img.blanc.site//wiki/img/20200630114909.png" alt="浏览器结果 1"><br><img src="https://img.blanc.site//wiki/img/20200630114908.png" alt="浏览器结果 2"><br><img src="https://img.blanc.site//wiki/img/20200630114910.png" alt="浏览器结果 3"></p><p>通过控制台可以清晰地看到响应头和响应主体的内容是符合我们预期的</p><h5 id="curl-结果分析"><a href="#curl-结果分析" class="headerlink" title="curl 结果分析"></a>curl 结果分析</h5><p>通过 <code>curl http://127.0.0.1:8888</code> 可以看到响应主体：</p><p><img src="https://img.blanc.site//wiki/img/20200630115755.png" alt="curl 结果 1"></p><p>通过 <code>curl -v http://127.0.0.1:8888</code> 可以看到详细的请求和响应内容：</p><p><img src="https://img.blanc.site//wiki/img/20200630115754.png" alt="curl 结果 2"></p><p>通过 <code>curl -v https://baidu.com</code> 获取百度首页的响应内容以作比较：</p><p><img src="https://img.blanc.site//wiki/img/20200630115753.png" alt="curl 结果 3"></p><p>可以看到目前浏览网页常用的正常请求要比自己构建的测试示例要复杂的多，这也是为什么经常使用 Web 框架而非单文件应用来处理这些请求的原因。</p><h2 id="解读-PEP-3333-中的某些细节"><a href="#解读-PEP-3333-中的某些细节" class="headerlink" title="解读 PEP-3333 中的某些细节"></a>解读 PEP-3333 中的某些细节</h2><p><a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a> 我只读到了 <a href="https://www.python.org/dev/peps/pep-3333/#buffering-and-streaming" target="_blank" rel="external nofollow noopener noreferrer">Buffering and Streaming</a> 章节，并且没能很好的理解此章节所描述的东西，因此在下面的细节分析中大都是此章节之前的一些内容。</p><h3 id="可迭代对象和可调用对象"><a href="#可迭代对象和可调用对象" class="headerlink" title="可迭代对象和可调用对象"></a>可迭代对象和可调用对象</h3><p>可迭代对象（callable）和可迭代对象（iterable）在 PEP 3333 中最常见的两个词汇，在 WSGI 规范中它们分别代表：实现了 <code>__call__</code> 的对象和实现了 <code>__iter__</code> 的对象。</p><h3 id="Unicode-bytes-str"><a href="#Unicode-bytes-str" class="headerlink" title="Unicode | bytes | str"></a>Unicode | bytes | str</h3><p>这是一组比较基础的概念：</p><ol><li>Unicode 是一种字符编码标准</li><li>bytes 和 str 是 Python 中两种不同的数据类型</li></ol><p>Python3 中字符串的默认类型是 str，在内存中以 Unicode 表示。如果要在网络中传输或保存为磁盘文件，需要将 str 转换为 bytes 类型。</p><h4 id="Unicode-UCS-UTF"><a href="#Unicode-UCS-UTF" class="headerlink" title="Unicode | UCS | UTF"></a>Unicode | UCS | UTF</h4><ol><li>Unicode（万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。Unicode 伴随着通用字符集的标准而发展，同时也以书本的形式对外发表。</li><li>UCS（Universal Character Set，通用字符集）是由ISO制定的ISO 10646（或称ISO/IEC 10646）标准所定义的标准字符集。</li><li>UTF（Unicode Transformation Format），Unicode 定义了两种映射方式：一种叫 the Unicode Transformation Format (UTF) 编码, 还有一种叫 Universal Character Set (UCS) 编码。一种编码映射一定范围（可能是子集）的 Unicode 码点（code points ）成代码值（code value）的序列。编码名字后面的数字代表一个代码值的位数（UTF使用位数，UCS 使用字节数）,UTF-8 和UTF-16是最常使用的编码。</li></ol><h4 id="bytes-str"><a href="#bytes-str" class="headerlink" title="bytes | str"></a>bytes | str</h4><blockquote><p>Python3 里面的 str 是在内存中对文本数据进行使用的，bytes 是对二进制数据使用的。</p><p>str 可以 encode 为 bytes，但是 bytes 不一定可以 decode 为 tr。实际上 <code>bytes.decode(‘latin1’)</code> 可以称为 str，也就是说 decode 使用的编码决定了 <code>decode()</code> 的成败，同样的，UTF-8 编码的 bytes 字符串用 GBK 去 <code>decode()</code> 也会出错。</p><p>bytes一般来自网络读取的数据、从二进制文件（图片等）读取的数据、以二进制模式读取的文本文件(.txt, .html, .py, .cpp等)</p><p>from <a href="https://zhuanlan.zhihu.com/p/56901822" target="_blank" rel="external nofollow noopener noreferrer">知乎-猿人学-Python 3 中str 和 bytes 的区别</a></p></blockquote><h4 id="WSGI-中的-String"><a href="#WSGI-中的-String" class="headerlink" title="WSGI 中的 String"></a>WSGI 中的 String</h4><p>WSGI 中规定了两种 String：</p><ol><li>Native String（常说的 str）用来表示 request/response headers and metadata</li><li>ByteString（Python3 中用 byte type 来表示）用于 request/response 的 body（例如：PUT/POST 输入和 HTML 页面输出）</li></ol><p>在 <a href="https://www.python.org/dev/peps/pep-3333/#unicode-issues" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a> 中有对这部分的详细说明。</p><h3 id="三个主要组成部件"><a href="#三个主要组成部件" class="headerlink" title="三个主要组成部件"></a>三个主要组成部件</h3><p>了解了以上基础概念之后再具体的看一下 WSGI 的三个主要组成部件：</p><h4 id="Application-Framework-下文简称-application"><a href="#Application-Framework-下文简称-application" class="headerlink" title="Application/Framework | 下文简称 application"></a>Application/Framework | 下文简称 application</h4><ol><li>application 是一个<strong>必须且只能</strong>接收两个参数的 callable，形如 <code>application(environ, start_response)</code>。而且这两个参数只能以<strong>位置参数</strong>的形式被传入。</li><li>environ 和 start_response 只是习惯性命名，对于具体传入的对象名称没有做要求。</li><li>application 必须可被<strong>多次调</strong>用，因为所有的 server/gateway（CGI 除外）都会发出此类的重复请求。</li><li><a href="https://www.python.org/dev/peps/pep-3333/#environ-variables" target="_blank" rel="external nofollow noopener noreferrer">environ 是一个字典参数</a>，包含了 CGI 风格的环境变量。必须使用<strong>内置的 Python 字典类型</strong>（不能是子类或自定义的 UserDict），并且允许 application <strong>以任何它想要的方式修改</strong>。字典还包括某些 <strong>WSGI 变量</strong>，并且还可能包括 <strong>server 特定的拓展参数</strong>，它们的命名需要遵守<strong>相应规范</strong>。</li><li>start_response 参数也是一个 callable，接收两个必要的未知参数和一个可选参数，三个参数依次默认命名为：status, response_headers, exc_info，即 <code>start_response(status, response_headers, exc_info=None)</code>。</li><li>status 是一个状态<strong>字符串</strong>（str），例如：<code>&quot;200 OK&quot;</code></li><li>response_headers 是一个描述 HTTP Response Headers 的 (header_name, header_value) <strong>元组列表</strong>。</li><li>可选参数 exc_info 只有当 application 捕获到错误并且视图向浏览器（客户端）显示时才会调用。</li><li>start_response callable 必须返回一个 write(body_data) callable，这个 callable 需要一个位置参数：一个要作为 HTTP 响应体一部分的 bytestring（<strong>注意：wirte callabel 只是为了支持某些现有框架的必要输出 API 而提供的；如果可以避免的话，新的 application/gateway 应该避免使用它</strong>）。</li><li>当 callable（<strong>如果实现了 write 这个 callable 指的就是 write；如果没有，这个 callable 指的就是 start_response 本身</strong>）被 server 调用时，<strong>必须</strong>返回一个产生零个或多个字符串的 iterable。可以通过多种方式实现，如：一个字符串列表、application 是一个 generator 函数或 application 是一个实现了 <code>__iter__</code> 的对象。<strong>无论如何</strong>，application 必须返回一个能够产生零个或多个字符串 iterable。</li><li>application 应该负责确保被写入的字符串是<strong>适合</strong> client 的格式的。</li><li>如果 <code>len(iterable)</code> 能够被成功执行（这里的 iterable 指的是第 10 条中的 iterable）则其返回的必须是<strong>一个 server 能够信赖的结果</strong>。也就是说 application 返回的 iterable 如果提供了一个有效的 <code>__len__</code> 方法就必须能够获得<strong>准确值</strong>。</li><li>如果 application 返回的 iterable 有 close 方法，server <strong>必须</strong>在当前请求<strong>完成后</strong>调用它，无论请求是否正常完成（为了支持 application 释放资源）。</li><li>application 应该检查其所需要的变量是否存在并对变量不存在的情况做好处理方案。</li></ol><h4 id="Server-Gateway-下文简称-server"><a href="#Server-Gateway-下文简称-server" class="headerlink" title="Server/Gateway | 下文简称 server"></a>Server/Gateway | 下文简称 server</h4><ol><li>server 必须以无缓冲（unbuffered）的方式将 yielded bytestrings 传输到 client，在下一次请求之前完成每一个 bytestring 的传输。换句话说 application 应该自己实现缓存。（对于这部分我理解的不是很透彻，大多都是直译的 <a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333</a>）</li><li>server 不能直接使用 application 返回的 iterable 的其他属性。</li><li>server 应该尽可能多的提供 CGI 变量。</li><li>符合 WSGI 规范的 server 应该记录所提供的变量。</li></ol><h4 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h4><ol><li>middleware 是一个单独的对象，可能在一些 application 中扮演 server 同时在一些 server 中扮演 application。</li></ol><h3 id="WSGI-中的坑"><a href="#WSGI-中的坑" class="headerlink" title="WSGI 中的坑"></a>WSGI 中的坑</h3><ol><li>要确定在那些地方使用 str，在那些地方使用 bytes</li></ol><h2 id="Python-wsgiref-官方库源码分析"><a href="#Python-wsgiref-官方库源码分析" class="headerlink" title="Python wsgiref 官方库源码分析"></a>Python wsgiref 官方库源码分析</h2><p>可以参考我的开源库 <a href="https://github.com/ryomahan/read-python" target="_blank" rel="external nofollow noopener noreferrer">read-python</a> 中 practices/for_wsgiref 目录下的 <a href="https://github.com/ryomahan/read-python/blob/master/practices/for_wsgiref/server.py" target="_blank" rel="external nofollow noopener noreferrer">server.py</a> 文件。</p><p>在这个文件中我提取了 Python wsgiref 官方库的必要代码汇聚成一个文件实现了一个和 <code>wsgiref.WSGIServer</code> 大致同样功能的 <code>WSGIServer</code> 类。</p><p>Python wsgiref 官方库对 WSGI 规范的实现更加抽象，加上一些历史原因使得代码分布在多个官方库中，我在抽离代码的过程中学到了很多但是同样也产生了很多困惑，我在源码中使用 <code>TODO 疑惑 XXX</code> 的形式将我的困惑表达出来了，如果你感兴趣并且恰好知道解决我疑惑的方法，欢迎直接给我的代码仓库提交 Issues。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.python.org/dev/peps/pep-333/" target="_blank" rel="external nofollow noopener noreferrer">PEP 333 Python Web Server Gateway Interface v1.0</a></li><li><a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external nofollow noopener noreferrer">PEP 3333 Python Web Server Gateway Interface v1.0.1</a></li><li><a href="https://zhuanlan.zhihu.com/p/22544725" target="_blank" rel="external nofollow noopener noreferrer">知乎-方应杭-「每日一题」什么是 Web 服务器（server）</a></li><li><a href="https://skyline75489.github.io/post/2014-9-8_python-wsgi-learning.html" target="_blank" rel="external nofollow noopener noreferrer">Skyline75489-Python WSGI学习笔记</a></li><li><a href="https://mozillazg.com/tag/rang-wo-men-yi-qi-lai-gou-jian-yi-ge-web-fu-wu-qi.html" target="_blank" rel="external nofollow noopener noreferrer">Huang Huang 的博客-翻译项目系列-让我们一起来构建一个 Web 服务器</a></li><li><a href="https://juejin.im/post/5ccb8bb8f265da03981fd577" target="_blank" rel="external nofollow noopener noreferrer">掘金- liaochangjiang-Python Web开发：开发wsgi中间件</a></li><li><a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="external nofollow noopener noreferrer">维基百科-Unicode</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%AD%97%E7%AC%A6%E9%9B%86#Unicode%E5%92%8CISO_10646%E7%9A%84%E5%85%B3%E7%B3%BB" target="_blank" rel="external nofollow noopener noreferrer">维基百科-通用字符集</a></li><li><a href="https://zhuanlan.zhihu.com/p/56901822" target="_blank" rel="external nofollow noopener noreferrer">知乎-猿人学-Python 3 中str 和 bytes 的区别</a></li><li><a href="https://docs.python.org/zh-cn/3/glossary.html" target="_blank" rel="external nofollow noopener noreferrer">Python 官方文档-术语对照表</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;如果你也想阅读 WSGI 相关的 PEP 规范，建议直接阅读 &lt;a href=&quot;https://www.python.org/d
      
    
    </summary>
    
    
      <category term="3-计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="1-理论计算机科学" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="4-编程语言和编译器" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/4-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
      <category term="Python" scheme="https://wiki.blanc.site/categories/3-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/1-%E7%90%86%E8%AE%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/4-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%99%A8/Python/"/>
    
    
      <category term="WSGI" scheme="https://wiki.blanc.site/tags/WSGI/"/>
    
  </entry>
  
</feed>
